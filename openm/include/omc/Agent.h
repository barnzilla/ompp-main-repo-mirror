/**
 * @file    Agent.h
 * Declares the Agent class and associated classes and templates
 *         
 */
// Copyright (c) 2013 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

#pragma once
#include <list>
#include <forward_list>
#include "om_types0.h" // for Time

using namespace std;

namespace mm {

    /**
     * Base agent.
     */

    class BaseAgent
    {
    public:

        /**
         * Assign initial value to all data members in agent, with no side-effects.
         * The function definition is specific to each kind of agent
         * and is generated by the openM++ compiler.
         */

        virtual void initialize_data_members() = 0;

        /**
         * One-time initialization of the offset of each agentvar in each type of agent.
         * This offset is used to invoke side-effects when agentvar values change.
         */

        virtual void initialize_agentvar_offsets() = 0;

        /**
         * Initialize value_in values for agentvars used in tables.
         * The function definition is specific to each kind of agent
         * and is generated by the openM++ compiler.
         */

        virtual void initialize_agent_tables() = 0;

        /**
         * Compute occurrence time for each event in agent.
         * The function definition is specific to each kind of agent
         * and is generated by the openM++ compiler.
         */

        virtual void initialize_agent_events() = 0;

        /**
         * Complete all pending table updates.
         * The function definition is specific to each kind of agent
         * and is generated by the openM++ compiler.
         */

        virtual void finalize_agent_tables() = 0;

        /**
         * Finalize agent events (remove from event queue).
         * The function definition is specific to each kind of agent
         * and is generated by the openM++ compiler.
         */

        virtual void finalize_agent_events() = 0;

        /**
         * Age the agent to the given time
         *
         * @param   t   The target time
         */

        virtual void age_agent( Time t ) = 0;

        /**
         * Add the agent to the zombie list for agents of this type.
         */

        virtual void make_zombie() = 0;

        /**
         * Age all agents to the given time
         *
         * @param   t   The target time
         */

        static void age_all_agents( Time t )
        {
            for ( auto agent : agents ) {
                agent->age_agent( t );
            }
        }


        /**
         * Finishes all agents.
         */

        static void finalize_all_agent_tables()
        {
            for (auto agent : agents) {
                agent->finalize_agent_tables();
            }
        }

        /**
         * Move all agents from zombie lists to corresponding available list
         * The function definition is generated by the openM++ compiler.
         */

        static void free_all_zombies();

        /**
         * Adds the agent to the list of active agents
         */

        void make_active()
        {
            agents.push_front( this );
            it_in_agents = agents.begin();
        }

        /**
         * Removes the agent from the list of active agents
         */
    
        void make_inactive()
        {
            agents.erase( it_in_agents );
        }

        void om_Start_begin()
        {
            initialize_data_members();
        }

        /**
         * Complete agent preparation for simulation
         */

        void om_Start_end()
        {
            initialize_agent_tables();
            initialize_agent_events();
            make_active();
        }

        /**
         * Remove agent from simulation.
         */

        void om_Finish_end()
        {
            finalize_agent_tables();
            finalize_agent_events();
            make_inactive();
            make_zombie();
        }

    private:

        /**
         * Active agents
         */

        static list<BaseAgent *> agents;

        /**
         * The iterator of this agent in \a agents.
         */

        list<BaseAgent *>::iterator it_in_agents;
    };

    /**
     * Agent.
     * Only instances of derived classes of Agent are actually created.
     *
     * @tparam  A   Type of a.
     */

    template<typename A>
    class Agent : public BaseAgent
    {
    public:

        /**
         * Agent allocation operator.
         * This allocator recycles agents of the given type.
         * Note that the argument of new() is required for the correct
         * signature but is not required or used.
         *
         * @param   count   Size of object (required for correct signature)
         *
         * @return  The allocated object.
         */

        void *operator new( size_t count )
        {
		    static bool first_invocation = true;
		    A *agent = nullptr;
            if ( available.empty() ) {
			    agent = ::new A;
                if ( first_invocation ) {
				    // agentvar offsets and event offsets have fixed values,
				    // so compute them only once, when the very first
				    // instance of an agent of this type is created.
				    agent->initialize_agentvar_offsets();
				    agent->initialize_event_offsets();
				    first_invocation = false;
			    }
            }
            else {
                agent = available.front();
                available.pop_front();
            }
            return agent;
        }

        void make_zombie()
        {
            // TODO remove from active_agents
        
            zombies.push_front( (A *)this );
        }

        /**
         * Free zombies.
         * Move all zombie agents to the available list
         * for re-use.
         */

        static void free_zombies()
        {
            while ( ! zombies.empty() ) {
                available.push_front( zombies.front() );
                zombies.pop_front();
            }
        }

        static forward_list<A *> zombies;
        static forward_list<A *> available;
    };

    /**
    * Agent zombie list (definition)
    */

    template<typename A>
    forward_list<A *> Agent<A>::zombies;

    /**
    * Agent available list (definition)
    */

    template<typename A>
    forward_list<A *> Agent<A>::available;

} // namespace mm
