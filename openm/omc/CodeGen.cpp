/**
 * @file    CodeGen.cpp
 * Implements the code generation class.
 */
// Copyright (c) 2013-2014 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

#include <iostream>
#include <fstream>
#include <algorithm>
#include <utility>
#include <typeinfo>
#include "CodeGen.h"
#include "CodeBlock.h"
#include "ast.h"
#include "libopenm/db/modelBuilder.h"

using namespace std;
using namespace openm;

void CodeGen::do_all()
{
	do_preamble();

	do_types();
	do_aggregations();
	do_parameters();
	do_tables();
	do_agents();
	do_entity_sets();
    do_event_queue();

    h += "void StartSimulation(int id);";
    h += "void EndSimulation();";

    do_ModelStartup();
    do_RunModel();
    do_ModelShutdown();
    do_API_entries();

    *oat0 << t0;
    *oat1 << t1;
    *oah << h;
    *oac << c;
    *oaz << z;
}

void CodeGen::do_preamble()
{
    // Get the model symbol
    ModelSymbol *model_symbol = dynamic_cast<ModelSymbol *>(Symbol::find_a_symbol(typeid(ModelSymbol)));
    assert(model_symbol);
    model_symbol->time_stamp = time_stamp;
    model_symbol->populate_metadata(metaRows);

    // Get the model_type symbol
    ModelTypeSymbol *model_type_symbol = dynamic_cast<ModelTypeSymbol *>(Symbol::find_a_symbol(typeid(ModelTypeSymbol)));
    assert(model_type_symbol);
    model_type_symbol->populate_metadata(metaRows);

    // Get the version symbol
    VersionSymbol *version_symbol = dynamic_cast<VersionSymbol *>(Symbol::find_a_symbol(typeid(VersionSymbol)));
    assert(version_symbol);
    version_symbol->populate_metadata(metaRows);

    // om_types0.h
    t0 += doxygen(
        "@file   om_types0.h",
        "Fundamental Types for model '" + model_symbol->name + "' - Generated by openM++ compiler",
        " ",
        " Model version = " + version_symbol->formatted_value(),
        " Time stamp = " + model_symbol->time_stamp
        );
    t0 += "";
    t0 += "#pragma once";
    t0 += "#include <cmath>";
    t0 += "#include \"omc/fixed_precision_float.h\"";
    t0 += "";

    // om_types1.h
    t1 += doxygen(
                "@file   om_types1.h",
                "Types for model '" + model_symbol->name + "' - Generated by openM++ compiler",
                " ",
                " Model version = " + version_symbol->formatted_value(),
                " Time stamp = " + model_symbol->time_stamp
                );
    t1 += "" ;
	t1 += "#pragma once";
    t1 += "#include \"om_types0.h\"";
    t1 += "#include \"omc/Range.h\"";
    t1 += "#include \"omc/Partition.h\"";
    t1 += "#include \"omc/Classification.h\"";
    t1 += "";

    // om_declarations.h
    h += doxygen(
                "@file   om_declarations.h",
                "Declarations for model '" + model_symbol->name + "' - Generated by openM++ compiler",
                " ",
                " Model version = " + version_symbol->formatted_value(),
                " Time stamp = " + model_symbol->time_stamp
                );
    h += "" ;
	h += "#pragma once";
	h += "#include \"omc/omSimulation.h\"";
	h += "#include \"custom.h\" // model-specific header file";
    h += "";
    h += "using namespace std;";
    h += "";

    // om_definitions.cpp
    c += doxygen(
                "@file   om_definitions.cpp",
                "Definitions for model '" + model_symbol->name + "' - Generated by openM++ compiler",
                " ",
                " Model version = " + version_symbol->formatted_value(),
                " Time stamp = " + model_symbol->time_stamp
                );
	c += "";
    c += "#include <cassert>";
    c += "#include <typeinfo>";
    c += "#include \"omc/omSimulation.h\"";
    c += "";

    // Get definition code associated with the model_type symbol
    c += model_type_symbol->cxx_definition_global();
    c += "";

    // Get definition code associated with the model symbol (name, time stamp)
    c += model_symbol->cxx_definition_global();
    c += "";

	c += "using namespace openm;";
	c += "";

    if (Symbol::option_event_trace) {
        // if event_trace option is on, tracing is active unless turned off
        c += "bool BaseEvent::trace_event_on = true;";
    }
    else {
        // independent of the event_trace option, this static member must be defined
        c += "bool BaseEvent::trace_event_on = false;";
    }

    // Let the run-time know whether to generate a running checksum for events
    if (Symbol::option_case_checksum) {
        c += "const bool BaseEvent::event_checksum_on = true;";
    }
    else {
        c += "const bool BaseEvent::event_checksum_on = false;";
    }
    // The checksum must be defined in any case
    c += "double BaseEvent::event_checksum_value = 0.0;";

    c += "";

    // om_initializers.cpp
    z += doxygen(
                "@file   om_fixed_parms.cpp",
                "Definitions for fixed parameters for model '" + model_symbol->name + "' - Generated by openM++ compiler",
                " ",
                " Model version = " + version_symbol->formatted_value(),
                " Time stamp = " + model_symbol->time_stamp
                );
	z += "";
    z += "#include \"om_types1.h\"";
	z += "";

}

void CodeGen::do_types()
{
    // om_types0.h - fundamental types declaration
    t0 += "// fundamental types";
    for (auto type : Symbol::pp_all_types0) {
        t0 += type->cxx_declaration_global();
    }
    t0 += "";

    // om_types1.h - templated types declaration
    t1 += "// templated types";
    for (auto type : Symbol::pp_all_types1) {
        t1 += type->cxx_declaration_global();
    }
    t1 += "";

    // om_definitions.cpp - types definitions
    c += "// fundamental types";
    for (auto type : Symbol::pp_all_types0) {
        c += type->cxx_definition_global();
    }
    c += "";

    c += "// templated types";
    for (auto type : Symbol::pp_all_types1) {
        c += type->cxx_definition_global();
    }
    c += "";

    // populate meta-data for types
    for (auto type : Symbol::pp_all_types0) {
        type->populate_metadata(metaRows);
    }
    for (auto type : Symbol::pp_all_types1) {
        type->populate_metadata(metaRows);
    }
}

void CodeGen::do_aggregations()
{
    if (Symbol::pp_all_aggregations.empty()) return;

    // parameter declarations
	h += "// model aggregations";
	c += "// model aggregations";
    for ( auto aggregation : Symbol::pp_all_aggregations ) {
        h += aggregation->cxx_declaration_global();
        c += aggregation->cxx_definition_global();
    }
	h += "";
	c += "";
}

void CodeGen::do_parameters()
{
	// parameter declarations
	h += "// model parameters";
    for ( auto parameter : Symbol::pp_all_parameters ) {
        h += parameter->cxx_declaration_global();
        if (parameter->cumrate) {
            h += parameter->lookup_fn->cxx_declaration_global();
        }
    }
	h += "";

	// parameter definitions & initializers
	c += "// model parameters (scenario, derived, missing)";
	z += "// model parameters (fixed)";
    for (auto parameter : Symbol::pp_all_parameters) {
        if (parameter->source == ParameterSymbol::fixed_parameter) {
            // place definition (with initializer) in the cpp module for fixed parameters
            z += parameter->cxx_definition_global();
        }
        else {
            c += parameter->cxx_definition_global();
        }
        if (parameter->cumrate) {
            c += parameter->lookup_fn->cxx_definition_global();
        }
    }
	c += "";

	// populate meta-data for parameters
    for ( auto parameter : Symbol::pp_all_parameters ) {
        parameter->populate_metadata(metaRows);
    }
}

void CodeGen::do_ModelStartup()
{
    c += "// Model startup method: initialization, inputs";
	c += "void ModelStartup(IModel * i_model)";
	c += "{";

    c += "// Agent static initialization pass #1: Initialize agent member offsets & null agent data members";
    for (auto agent : Symbol::pp_all_agents) {
        c += "// Agent - " + agent->name;
        c += agent->name + "::om_null_agent.om_initialize_callback_member_offsets();";
        c += agent->name + "::om_null_agent.om_initialize_data_members0();";
        c += "";
    }

    c += "// Agent static initialization pass #2: Initialize null agent dependent agentvars";
    for (auto agent : Symbol::pp_all_agents) {
        c += "// Agent - " + agent->name;
        c += agent->name + "::om_null_agent.om_initialize_identity_attributes();";
        c += agent->name + "::om_null_agent.om_initialize_derived_attributes();";
    }
    c += "";

    c += "// Sanity type check of storage type and readParameters type argument";
    for (auto parameter : Symbol::pp_all_parameters) {
        c += parameter->cxx_assert_sanity();
    }
    c += "";

    c += "theLog->logMsg(\"Reading Parameters\");";
    for (auto parameter : Symbol::pp_all_parameters) {
        if (parameter->source == ParameterSymbol::scenario_parameter) {
            c += parameter->cxx_read_parameter();
        }
        else if (parameter->source == ParameterSymbol::missing_parameter) {
            c += "theLog->logFormatted(\"warning - no values supplied for parameter " + parameter->name + "\");";
        }
    }

	c += "}";
	c += "";
}

void CodeGen::do_ModelShutdown()
{
	c += "// Model shutdown method: outputs";
	c += "void ModelShutdown(IModel * i_model)";
	c += "{";
	c += "// write output result tables";
	c += "theLog->logMsg(\"Writing Output Tables\");";
    for ( auto table : Symbol::pp_all_tables ) {
	    c += "the" + table->name + ".compute_expressions();";
    }
    for ( auto table : Symbol::pp_all_tables ) {
	    c += "i_model->writeOutputTable( \"" + table->name + "\", the" + table->name + ".n_accumulators, " + to_string(table->cell_count()) + ", const_cast<const double **>(the" + table->name + ".accumulators) );";
    }
    c += "}";
	c += "";
}

void CodeGen::do_agents()
{
	h += "// forward declarations of model agent classes (for links)";
    for (auto agent : Symbol::pp_all_agents) {
        h += "class " + agent->name + ";";
    }
    h += "";
    for ( auto agent : Symbol::pp_all_agents ) {

	    h += "// model agent classes";
        // e.g. class Person : public Agent<Person>
	    h += "class " + agent->name + " : public Agent<" + agent->name + ">";
        h += "{";
	    h += "public:";

	    h += "";
	    h += "//";
	    h += "// function members in " + agent->name + " agent";
	    h += "//";
	    h += "";

	    h += "// operator overload for entity comparison based on entity_id";
        h += "bool operator< ( " + agent->name + " & rhs )";
        h += "{";
        h += "return entity_id < rhs.entity_id;";
        h += "}";
	    h += "";

        for ( auto func_member : agent->pp_agent_funcs ) {
            h += func_member->cxx_declaration_agent();
            c += func_member->cxx_definition_agent();
        }

	    h += "";
	    h += "//";
	    h += "// data members in " + agent->name + " agent";
	    h += "//";
	    h += "";
        for ( auto data_member : agent->pp_agent_data_members ) {
            h += data_member->cxx_declaration_agent();
            c += data_member->cxx_definition_agent();
        }
	    h += "";
	    c += "";

        h += "// The declaration of the single static " + agent->name;
        h += "// used to retrieve (zero) values when dereferencing nullptr link agentvars.";
        h += "static " + agent->name + " " + "om_null_agent;";

	    h += "}; // class " + agent->name;
	    h += "";

        c += "// The definition of the single static " + agent->name;
        c += "// used to retrieve (zero) values when dereferencing nullptr link agentvars.";
        c += agent->name + " " + agent->name + "::om_null_agent;";
    }

    c += "// definition of global time (declaration in Event.h)";
    c += "Time BaseEvent::global_time;";
    c += "";
    c += "// definition of global event counter (declaration in Event.h)";
    c += "big_counter BaseEvent::global_event_counter;";
    c += "";

    c += doxygen("Free all zombie agents");
    c += "void BaseAgent::free_all_zombies()";
    c += "{";
    for ( auto agent : Symbol::pp_all_agents ) {
        // e.g. Person::free_zombies();
        c += agent->name + "::free_zombies();";
    }
    c += "}";

}

void CodeGen::do_entity_sets()
{
    if (Symbol::pp_all_entity_sets.size() > 0) {
	    h += "// entity sets";
	    c += "// entity sets";

	    for ( auto es : Symbol::pp_all_entity_sets ) {
            h += es->cxx_declaration_global();
            c += es->cxx_definition_global();
        }

	    h += "";
	    c += "";
    }
}

void CodeGen::do_tables()
{
	h += "// model output tables";
	c += "// model output tables";

	for ( auto table : Symbol::pp_all_tables ) {
        h += table->cxx_declaration_global();
        c += table->cxx_definition_global();
        table->populate_metadata(metaRows);
    }

	h += "// Model code interface to tables";
	h += "double GetTableValue(const string name, ...);";
	h += "void SetTableValue(const string name, double value, ...);";

	c += "// Model code interface to tables";
	c += "double GetTableValue(const string name, ...)";
	c += "{";
	c += "// TODO";
    c += "return 0.0;";
    c += "}";
    c += "";

	c += "void SetTableValue(const string name, double value, ...)";
	c += "{";
	c += "// TODO";
    c += "}";

    h += "";
	c += "";
}

void CodeGen::do_event_queue()
{
    c += doxygen( "The event queue (definition)" );
    c += "set<BaseEvent *, less_deref<BaseEvent *> > BaseEvent::event_queue;";
    c += doxygen( "The dirty event list (definition)" );
    c += "tailed_forward_list<BaseEvent *> BaseEvent::dirty_events;";
    c += doxygen( "The active agent list (definition)" );
    c += "list<BaseAgent *> BaseAgent::agents;";
    c += "";
}


void CodeGen::do_RunModel()
{
	c += "// Model simulation (implemented in framework module, usually from a 'use' instruction)";
	c += "extern void RunModel(IModel * i_model);";
    c += "";
}


void CodeGen::do_API_entries()
{
	c.smart_indenting ( false );
	c += "namespace openm";
	c += "{";
	c += "    // set entry points to the code generated by openM++ compiler";
	c += "    static ModelEntryHolder theModelEntry(::ModelStartup, ::RunModel, ::ModelShutdown);";
	c += "}";
	c += "";
	c.smart_indenting ( true );
}