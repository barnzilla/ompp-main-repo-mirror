// Copyright (c) 2013-2014 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

//LABEL(SyntaxProbes, EN) Probes for omc development and tssting


classification SEX //EN Sex
{
    //EN Female
    FEMALE,

    //EN Male
    MALE
};

classification REGION //EN Region
{
    //EN East
    EAST,

    //EN West
    WEST
};

partition AGE_GROUP //EN Age group
{
    0.5,
    10,
    20,
    30
};

range YEAR //EN Year
{
    -3,
     4
};

parameters
{
    //EN a long
    long a_long;

    //EN a float
    float a_float;

    //EN a double
    double a_double = { 2.3 };

    //EN a switch (bool)
    logical a_switch;

    //EN a SEX (classification)
    SEX a_sex;

    //EN a YEARS (range)
    YEAR a_years;

    //EN a AGE_GROUP (partition)
    // supported in ompp, unsupported in Modgen
    //AGE_GROUP a_age_group;

    //EN my first multi-dimensional parameter
    // 'rel' is supported in ompp, not supported in Modgen
    double Something[SEX][AGE_GROUP] = {
        1, 2, 3, 4, 5,
        6, 7, 8, 9, 10
    };

};

actor Person            //EN Individual
{
    uint my_uint = { 0 };

    TIME my_first_happy_time;

    YEAR year;

    EDUCATION_LEVEL edlev;

};

// deliberately declared after use in agent statement above.
classification EDUCATION_LEVEL
{
    RL_PRESCHOOL,
    RL_PRIMARY,
    RL_SECONDARY,
    RL_POST_SECONDARY
};


classification EYE_COLOUR
{
    EC_BLUE,
    EC_BROWN
};

actor Person            //EN Individual
{
    //EN Eye colour
    EYE_COLOUR eye_colour;

    logical eye_colour_definitive = { FALSE };

    event timeEyeColourChangeEvent, EyeColourChangeEvent;

};

TIME Person::timeEyeColourChangeEvent()
{
    TIME event_time = TIME_INFINITE;

    if (!eye_colour_definitive) {
        // eye colour becomes definitive at six months of age
        event_time = WAIT(0.5);
    }

    return event_time;
}

void Person::EyeColourChangeEvent()
{
    // 70% of babies change eye colour to brown by 6 months of age
    if (RandUniform(3) < 0.7) {
        eye_colour = EC_BLUE;
    }
    else {
        eye_colour = EC_BROWN;
    }
    eye_colour_definitive = true;
}


/*NOTE(ProbeOfHappiness2, EN)
	This table contains statistics related to happiness (#2).
*/
table Person ProbeOfHappiness2 //EN Probe of happiness #2
{
	{
		value_in(alive),				   //EN Population size
		value_out(happy),             //EN Happy at death
		duration(playing, TRUE) / value_in(alive), //EN Average years playing in lifetime decimals=4
		- 0.5 * duration(happy, TRUE) / value_in(alive) //EN happiness-adjusted life-years decimals=4
	} //EN Quantity
};

parameters{
    logical i_bool = { TRUE };
    SEX i_sex = { MALE };
	// parameters of type partition not supported in Modgen
    //AGE_GROUP i_age_group = { 2 };
    YEAR i_year = { -2 };

    logical j_bool[REGION] = { TRUE, FALSE };
    SEX j_sex[REGION] = { MALE, FEMALE };
	// parameters of type partition not supported in Modgen
    //AGE_GROUP j_age_group[REGION] = { 2, 3 };
    YEAR j_year[REGION] = { -2, 0 };

    logical k_bool[REGION][REGION] = { TRUE, FALSE, FALSE, TRUE };
    SEX k_sex[REGION][REGION] = { MALE, FEMALE, FEMALE, MALE };
	// parameters of type partition not supported in Modgen
    //AGE_GROUP k_age_group[REGION][REGION] = { 2, 3, 3, 2 };
    YEAR k_year[REGION][REGION] = { -2, 0, 1, 3 };

};

range RNG_0_19 { 0, 19 };
range RNG_0_20 { 0, 20 };
range RNG_0_30 { 0, 30 };
range RNG_0_100 { 0, 100 };
range RNG_0_200 { 0, 200 };

parameters
{
     int z20[RNG_0_19] = {
        (3) {1, (2) {2, 3}},
        (5) 42
        //1,2,3,4,5,6,7,8,9,10,
        //11,12,13,14,15,16,17,18,19,20
    };
};

table Person MultiDimTest
{
    {
        duration()
    }
    * happy
    * playing
};

actor Person
{
    real d = happy ? 0.5 : -0.5;
    real q = duration(happy, TRUE) / duration();
};

table Person qTest
{
    {
        value_out(q)
    }
};

table Person FilterTest
[ happy == TRUE ]
{
    {
        duration()
    }
    * playing
};


table Person AgentIdTest_Person
{
    first_30_agent_ids
    * {
        value_out(actor_id)
    }
};

actor Person
{
    RNG_0_20 first_20_agent_ids = actor_id;
    RNG_0_30 first_30_agent_ids = actor_id;
    RNG_0_100 first_100_agent_ids = actor_id;
    RNG_0_200 first_200_agent_ids = actor_id;
};
actor Thing
{
    RNG_0_20 first_20_agent_ids = actor_id;
    RNG_0_30 first_30_agent_ids = actor_id;
    RNG_0_100 first_100_agent_ids = actor_id;
    RNG_0_200 first_200_agent_ids = actor_id;
};

table Thing AgentIdTest_Thing
{
    first_30_agent_ids
    * {
        value_out(actor_id)
    }
};
