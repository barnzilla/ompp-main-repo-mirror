/**
* @file    omSimulation.h
* Common declarations for all models.
* 
* The file is #include'd by the C++ files generated by the OpenM++ compiler.
*/
// Copyright (c) 2013-2015 OpenM++
// This code is licensed under the MIT license (see LICENSE.txt for details)

#pragma once
#include <cassert>
#include <cfloat>
#include <cmath>
#include <cstdarg>
#include <random>
#include <forward_list> // for observation collections in tables
#include "libopenm/omModel.h"
#include "libopenm/common/omHelper.h" // for openm::SimulationException
#include "omc/fixed_precision.h"

#include "omc/globals0.h"

#include "om_types0.h" // fundamental model types
#include "omc/entity_ptr.h"
#include "omc/Range.h"
#include "omc/Partition.h"
#include "omc/Classification.h"
#include "omc/Entity.h"
#include "omc/Attribute.h"
#include "omc/Event.h"
#include "omc/Multilink.h"
#include "omc/EntitySet.h"
#include "omc/Table.h"
#include "omc/Increment.h"
#include "omc/cumrate.h"
#include "om_types1.h" // model-specific types

/**
 * The OPENM macro is not defined for Modgen models. It can be used to select Modgen-
 * specific or OpenM++-specific C++ code during C++ compilation. Both the Modgen compiler and
 * omc ignore preprocessor directives in model source code.
 */
#define OPENM 1

#include "omc/globals1.h"

#include "omc/macros0.h"

#include "custom_early.h" // model-specific declarations and includes (early)

// Make logical a synonym for bool in C++ model code.
typedef bool logical;

// map MFC BOOL to int
typedef int BOOL;

// Make some (deprecated) uses in model code of the MS CString class work portably
typedef std::string CString;

#include "om_declarations.h" // model-specific classes

#include "custom.h" // model-specific declarations and includes (late)

#include "omc/min_max.h" // min and max templates
#include "omc/macros1.h" // macros and templates (late)


namespace openm {

    /**
     * model API entries holder.
     * 
     * Used to bind model-specific functions to OpenM++ code which manages the life-cycle of model
     * execution.  The 4 global 'Handler' functions are defined in the framework module used by the
     * model, e.g. use/case_based_modgen.ompp.
     */
    struct ModelEntryHolder
    {
        ModelEntryHolder(
        OM_RUN_ONCE_HANDLER i_RunOnceHandler,
        OM_RUN_INIT_HANDLER i_RunInitHandler,
        OM_STARTUP_HANDLER i_ModelStartupHandler,
        OM_EVENT_LOOP_HANDLER i_RunModelHandler,
        OM_SHUTDOWN_HANDLER i_ModelShutdownHandler
        )
        {
            ::RunOnceHandler = i_RunOnceHandler;              // link run once function
            ::RunInitHandler = i_RunInitHandler;              // link run init function
            ::ModelStartupHandler = i_ModelStartupHandler;    // link model startup function
            ::RunModelHandler = i_RunModelHandler;            // link user portion of model event loop
            ::ModelShutdownHandler = i_ModelShutdownHandler;  // link model shutdown function
        }
    };

}

