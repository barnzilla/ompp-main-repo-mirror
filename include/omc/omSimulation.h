/**
* @file    omSimulation.h
* Common declarations for all models.
* 
* The file is #include'd by the C++ files generated by the OpenM++ compiler.
*/
// Copyright (c) 2013-2014 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

#pragma once
#include <cfloat>
#include <cmath>
#include <iostream> // for debug log only
#include <fstream> // for debug log only
#include <cstdarg> // for debug log only
#include "om_types0.h" // fundamental model types
#include "omc/link.h"
#include "omc/Range.h"
#include "omc/Agent.h"
#include "omc/AgentVar.h"
#include "omc/Event.h"
#include "omc/Multilink.h"
#include "omc/EntitySet.h"
#include "om_types1.h" // model-specific types
#include "libopenm/omModel.h"

#include "om_declarations.h" // model-specific classes


// The following macro is not defined for Modgen models.
// It can be used to exclude Modgen-specific C++ code during C++ compilation by openM++.
// Both the Modgen compiler and omc ignore preprocessor directives in model source code.
#define OPENM

#define TRUE true
#define FALSE false
#define WAIT( delta_time ) static_cast<Time>((time + static_cast<Time::type>(delta_time)))

// Implementation of old-style Modgen macros related to classifications, ranges, and partitions
#define MIN( symbol )				(symbol::min)
#define MAX( symbol )				(symbol::max)
#define SIZE( symbol )				(symbol::size)
#define RANGE_POS( rname, val )     (rname::to_index(val))
#define COERCE( rname, val )        (((val) > rname::max) ? rname::max : ((val) < rname::min) ? rname::min : (val))
#define WITHIN( rname, val )        (rname::within(val))
#define POINTS( symbol )		   	(symbol::upper_bounds())
#define SPLIT( val, symbol )        (symbol::value_to_interval(val))

// Ignore IMPLEMENT_HOOK 
#define IMPLEMENT_HOOK()

// override std:min and std::max to enable type conversion of arguments
#ifndef min
#define min(a,b) (((a)< (b)) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) (((a)> (b)) ? (a) : (b))
#endif

// translate use of CString in model developer code to C++ string for portability
#define CString string

// A (very) direct implementation of the variadic WriteDebugLogEntry() Modgen function
#define WriteDebugLogEntry theTrace->logFormatted

// map logical to bool (for local variable declarations in Modgen models)
#define logical bool

namespace openm {

    /**
     * model API entries holder.
     * 
     * Used to bind model-specific functions to OpenM++ code which manages the life-cycle of model
     * execution.  The 3 global 'Handler' functions are defined in the framework module used by the
     * model, e.g. use/case_based_modgen.ompp.
     */
    struct ModelEntryHolder
    {
        ModelEntryHolder(
        OM_STARTUP_HANDLER i_ModelStartupHandler,
        OM_EVENT_LOOP_HANDLER i_RunModelHandler,
        OM_SHUTDOWN_HANDLER i_ModelShutdownHandler
        )
        {
            ::ModelStartupHandler = i_ModelStartupHandler;    // link model startup function
            ::RunModelHandler = i_RunModelHandler;            // link user portion of model event loop
            ::ModelShutdownHandler = i_ModelShutdownHandler;  // link model shutdown function
        }
    };

}

// The following global functions are defined in framework modules,
// as indicated. They are documented in the Modgen Developer's Guide.

// defined in use/common.ompp
extern void SetMaxTime(double max_value);
extern void StartEventTrace();
extern void StopEventTrace();

// defined in use/random/random_modgen.ompp
extern double RandUniform(int strm);
extern double RandNormal(int strm);
extern double RandLogistic(int strm);

// defined in use/case_based/case_based_modgen.ompp
extern double GetCaseSeed();
extern int GetCaseSample();
extern long long GetAllCases();
extern int GetSubSamples();

// defined in use/time_based/time_based_modgen.ompp
extern int GetReplicate();
extern int GetReplicates();

// defined in framework.ompp (model-specific)
extern void StartSimulation();
extern void EndSimulation();
