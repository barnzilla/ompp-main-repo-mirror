/**
* @file    omSimulation.h
* Common declarations for all models.
*/
// Copyright (c) 2013-2014 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

#pragma once
#include <cfloat>
#include <cmath>
#include <iostream> // for debug log only
#include <fstream> // for debug log only
#include <cstdarg> // for debug log only
#include "om_types0.h" // fundamental model types
#include "omc/link.h"
#include "omc/Range.h"
#include "omc/Agent.h"
#include "omc/AgentVar.h"
#include "omc/Event.h"
#include "omc/Multilink.h"
#include "omc/EntitySet.h"
#include "om_types1.h" // model-specific types
#include "libopenm/omModel.h"

#include "om_declarations.h" // model-specific classes


// The following macro is not defined for Modgen models.
// It can be used to exclude Modgen-specific C++ code during C++ compilation by openM++.
// Both the Modgen compiler and omc ignore preprocessor directives in model source code.
#define OPENM

#define TRUE true
#define FALSE false
#define WAIT( delta_time ) static_cast<Time>((time + static_cast<Time::type>(delta_time)))

// Implementation of old-style Modgen macros related to classifications, ranges, and partitions
#define MIN( symbol )				(symbol::min)
#define MAX( symbol )				(symbol::max)
#define SIZE( symbol )				(symbol::size)
#define RANGE_POS( rname, val )     (rname::to_index(val))
#define COERCE( rname, val )        (static_cast<rname>(val))
#define WITHIN( rname, val )        (rname::within(val))
#define POINTS( symbol )		   	(symbol::upper_bounds())
#define SPLIT( val, symbol )        (symbol::value_to_interval(val))

// A (very) direct implementation of the variadic WriteDebugLogEntry() Modgen function
#define WriteDebugLogEntry theTrace->logFormatted

// map logical to bool (for local variable declarations in Modgen models)
#define logical bool

namespace openm {

    /**
     * model API entries holder.
     * 
     * Used to bind model-specific functions to OpenM++ code which manages the life-cycle of model
     * execution.  The 3 global 'Handler' functions are defined in the framework module used by the
     * model, e.g. use/case_based_modgen.ompp.
     */
    struct ModelEntryHolder
    {
        ModelEntryHolder(
        OM_STARTUP_HANDLER i_ModelStartupHandler,
        OM_EVENT_LOOP_HANDLER i_RunModelHandler,
        OM_SHUTDOWN_HANDLER i_ModelShutdownHandler
        )
        {
            ::ModelStartupHandler = i_ModelStartupHandler;    // link model startup function
            ::RunModelHandler = i_RunModelHandler;            // link user portion of model event loop
            ::ModelShutdownHandler = i_ModelShutdownHandler;  // link model shutdown function
        }
    };

}

// The following global run-time functions are defined in the module use/common.ompp.
// They are documented in the Modgen Developer's Guide
extern void SetMaxTime(double max_value);
extern void StartEventTrace();
extern void StopEventTrace();

// The following global run-time functions are defined in the simulation framework module
// used by the model, e.g. case_based_modgen.ompp or time_based_modgen.ompp.
// They are documented in the Modgen Developer's Guide
extern double RandUniform(int strm);
extern double RandNormal(int strm);
extern void StartSimulation();
extern void EndSimulation();
extern double GetCaseSeed();


/**
 * Model framework code uses the fmk namespace to protect the global namespace for use by the model developer.
 */
namespace fmk {

    /**
     * Helper function to output a trace event message to the trace log.
     * 
     * This function is used in code generated by omc. It is implemented in the module
     * use/common.ompp, which is included by all models.
     *
     * @param entity_name If non-null, name of the entity.
     * @param entity_id   Identifier for the entity.
     * @param case_seed   The case seed.
     * @param event_name  If non-null, name of the event.
     * @param time        The time.
     */
    void event_trace_msg(const char *entity_name, int entity_id, double case_seed, const char *event_name, double time);

    /**
     * Helper function to output a case checksum message to the trace log.
     * 
     * This function is used in framework code for the model, e.g. use/case_based_modegen.ompp. It
     * is implemented in the module use/common.ompp, which is included by all models.
     *
     * @param case_seed     The case seed.
     * @param case_sample   The case sample.
     */
    void case_checksum_msg(double case_seed, int case_sample);
}


