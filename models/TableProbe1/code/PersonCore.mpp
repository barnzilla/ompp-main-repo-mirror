classification SCRIPT
{
    S_00, //EN S_00: Filter true on exit
    S_01, //EN S_01: Filter false on exit
    S_02, //EN S_02: Fltr & x
    S_03, //EN S_03: Fltr w/o x
    S_04, //EN S_04: col & multiple x
    S_05, //EN S_05: No spurious changes
    S_06, //EN S_06: Spurious change in x
    S_07, //EN S_07: Spurious change in filter (true-false-true)
    S_08, //EN S_08: Spurious change in filter (false-true-false)
    S_09  //EN S_09: Spurious change in col
};

range ASSIGNMENTS
{
    0,
    9
};

classification ATTRIBUTE
{
    A_TIME,  //EN time
    A_ALIVE, //EN alive
    A_FLTR,  //EN filter
    A_ROW,   //EN row
    A_COL,   //EN col
    A_X      //EN x
};

range ROW
{
    0, 1
};

range COL
{
    0, 2
};

range EVENT_COUNTER
{
    0, 9
};

parameters
{
    //EN Only one script (case)
    logical OneScript;

    //EN Which script (case)
    SCRIPT WhichScript;

    //EN Scripts of attribute assignments
	int Scripts[SCRIPT][ASSIGNMENTS][ATTRIBUTE];
	/* NOTE(Scripts, EN)
        The leading dimension SCRIPT corresponds to a case in the simulation.
        The first column gives the times at which values will be assigned to attributes.
        Additional columns are the values to assign at the given time.
        If duplicate values with the same time are present they are assigned in row order,
        within the event at the given time.
        The simulation starts at time 0, with no associated event,
        so entries with time=0 assign values to attributes before the entity enters the simulation.
        An event occurs at each integral time 1,2,... during which assignments occur.
	*/

};

actor Person
{
    //EN Scripts (with long description)
    SCRIPT script = OneScript ? SCRIPT_t(WhichScript) : SCRIPT_t(actor_id - 1);

	logical alive;
    logical fltr;
    ROW row;
    COL col;
    int x;
    EVENT_COUNTER event_counter;

    void AssignAttributes();

	event timeScriptEvent, ScriptEvent;

	void Start();
	void Finish();
};

void Person::AssignAttributes()
{
    for (int j = 0; j < SIZE(ASSIGNMENTS); ++j) {

        if (time == Scripts[script][j][A_TIME]) {

            alive  = 0 != Scripts[script][j][A_ALIVE];
            fltr   = 0 != Scripts[script][j][A_FLTR];
            row    = COERCE(ROW, Scripts[script][j][A_ROW]);
            col    = COERCE(COL, Scripts[script][j][A_COL]);
            x      = Scripts[script][j][A_X];

        }
    }
}

TIME Person::timeScriptEvent()
{
	return WAIT(1.0);
}

void Person::ScriptEvent()
{
    event_counter++;

    AssignAttributes();

    if (alive == false) {
	    Finish();
    }
}

void Person::Start()
{
    initialize_attributes();

	age = 0;
	time = 0;

    AssignAttributes();

    enter_simulation();
}

void Person::Finish()
{
    exit_simulation();
}
