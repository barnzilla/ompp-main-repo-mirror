//LABEL(ZZZUserTables, EN) User tables

/* NOTE(ZZZUserTables, EN)
	Contains optional summary tables which are dependent on 
	previously calculated user tables in multiple modules.  This module starts
	with ZZZ so that these tables are computed last, to ensure that dependent user tables
	are calculated.  Modgen knows about dependencies of normal tables, but does
	not handle dependencies of user tables in its design.

	Model code refactored so that this module explicitly calls
	other UserTables-like functions in other modules first.

	This entire module can be commented out or removed from the project
	to increase memory and computational efficiency,
	with no effect on results.
*/

table_group SummaryTables //EN Summary tables
{
	NbhdStatsbyDec
};

dependency(NbhdStatsbyDec, YstatsByDecNbhd, NbhdAvgsByDec);
user_table NbhdStatsbyDec //EN NbhdStatsbyDec
{
	{
		// from NbhdAvgsByDec
		OCCUPANCY_FACTOR,	  //EN Occupancy factor decimals=2
		AVERAGE_HEALTH,	//EN Average health decimals=2
		AVERAGE_EDUCATION, //EN Average education decimals=2
		AVERAGE_INCOME, //EN Average income decimals=2
		ADULT_COUNT, //EN Adult count
		CHILD_COUNT, //EN Child count
		AVERAGE_AGE, //EN Average Age


		// from YstatsByDecNbhd
		TOTAL_PERSONS,     //EN Persons
		TOTAL_INCOME,     //EN Total Income
		MEDIAN_INCOME,    //EN Median Income
		TOTAL_INCOME_LT_MEDIAN, //EN Total Income less than median
		MEDIAN_Y_SHARE //EN Median income share decimals=4
	}
	* RANGE_NEIGHBORHOOD
	* DECADE
};


extern void IncomeTables_UserTables(void); // UserTables in IncomeTables.mpp
//extern void ModelComparison_UserTables(void); // UserTables in ModelComparison.mpp

void UserTables(void)
{
	// call UserTables functions in other modules first
	IncomeTables_UserTables();
	//ModelComparison_UserTables();

	const int nNeighbourhoods = SimulatedNeighborhoods;
	const int nDecades = SIZE(DECADE);

	for ( int nN = 0; nN < nNeighbourhoods; nN++ )
	{
		for ( int nT = 0; nT < nDecades; nT++ )
		{
			// from NbhdAvgsByDec

			double dOccupancyFactor  = FixedGetTableValue("NbhdAvgsByDec.Expr0", nT, nN);
			double dAverageHealth    = FixedGetTableValue("NbhdAvgsByDec.Expr6", nT, nN);
			double dAverageEducation = FixedGetTableValue("NbhdAvgsByDec.Expr2", nT, nN);
			double dAverageIncome    = FixedGetTableValue("NbhdAvgsByDec.Expr4", nT, nN);
			double dAdultCount       = FixedGetTableValue("NbhdAvgsByDec.Expr7", nT, nN);
			double dChildCount       = FixedGetTableValue("NbhdAvgsByDec.Expr8", nT, nN);
			double dAverageAge       = FixedGetTableValue("NbhdAvgsByDec.Expr9", nT, nN);

			FixedSetTableValue("NbhdStatsbyDec.OCCUPANCY_FACTOR",  dOccupancyFactor, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.AVERAGE_HEALTH",    dAverageHealth, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.AVERAGE_EDUCATION", dAverageEducation, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.AVERAGE_INCOME",    dAverageIncome, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.ADULT_COUNT",       dAdultCount, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.CHILD_COUNT",       dChildCount, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.AVERAGE_AGE",       dAverageAge, nN, nT);

			// from YstatsByDecNbhd

			double dTotalPersons        = FixedGetTableValue("YstatsByDecNbhd.TOTAL_PERSONS", nN, nT);
			double dTotalIncome         = FixedGetTableValue("YstatsByDecNbhd.TOTAL_INCOME", nN, nT);
			double dMedianIncome        = FixedGetTableValue("YstatsByDecNbhd.MEDIAN_INCOME", nN, nT);
			double dTotaIncomeLtMedian  = FixedGetTableValue("YstatsByDecNbhd.TOTAL_INCOME_LT_MEDIAN", nN, nT);
			double dMedianYShare        = FixedGetTableValue("YstatsByDecNbhd.MEDIAN_Y_SHARE", nN, nT);

			FixedSetTableValue("NbhdStatsbyDec.TOTAL_PERSONS",          dTotalPersons, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.TOTAL_INCOME",           dTotalIncome, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.MEDIAN_INCOME",          dMedianIncome, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.TOTAL_INCOME_LT_MEDIAN", dTotaIncomeLtMedian, nN, nT);
			FixedSetTableValue("NbhdStatsbyDec.MEDIAN_Y_SHARE",         dMedianYShare, nN, nT);

		}
	}
}



