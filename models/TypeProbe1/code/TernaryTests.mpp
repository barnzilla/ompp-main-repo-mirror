//LABEL(TernaryTests, EN) Various tests of ternary operator and interactions wtih ompp types

/* NOTE(TernaryTests, EN)
	This module contains various tests.
*/

#ifndef MODGEN
#include "omc/omSimulation.h" // enable IDE to understand C++ portions
#endif

#if false // hide syntactic island from IDE
actor Person {
    EMOTION a_emotion1 = { HAPPY };
    EMOTION a_emotion2 = { SAD };

    TIME a_t1 = { 2.34 };

    void SomeTernaryTests();
    hook SomeTernaryTests, MortalityEvent, 3;
};
#endif // hide syntactic island from IDE

// The implement function of MortalityEvent
void Person::SomeTernaryTests()
{
    auto t1 = true ? 1.1 : 2; // sanity check

    int i1 = 2;
    double d1 = (22.0 / 7.0);

    // The following produces a C++ compile error 'attempting to access a deleted function'
#if false
    auto t7 = (a_dbl2 < i1) ? a_dbl2 : i1;
    if (a_dbl2 < i1) {
        if (t7 != a_dbl2) {
            stringstream ss;
            ss << "error: t7=" << t7 << " a_dbl2=" << a_dbl2;
            ModelExit(ss.str().c_str());
        }
    }
#endif

    auto t8 = (a_dbl2 < i1) ? (double)a_dbl2 : i1;

    // Ternary operator using Attribute of a wrapped type fixed_precision<double> aka Time aka TIME
    // BAD!! The following produces result int, truncating the value of a_t1
    // a_t1 = 2.34, i2 = 3, t9 = 2 (is an int)
    // What is the conversion sequence from Attribute<Time, double...> to int??
    // Debug shows it is going through the T2 user-defined conversion to double
    int i2 = 3;
    auto t9 = (a_t1 < i2) ? a_t1 : i2;
    if (a_t1 < i2) {
        if (t9 != a_t1) {
            stringstream ss;
            ss << "error: t9=" << t9 << " a_t1=" << a_t1;
            ModelExit(ss.str().c_str());
        }
    }

    // The following produces a C++ compile error 'attempting to reference a deleted function'
    // which is the copy constructor for the Attribute a_dble2.
    // If the copy constructor is not deleted, the local variable t10 would be instantiated
    // with the type of the Attribute a_dbl2.  
#if false
    auto t10 = (a_dbl2 < i1) ? a_dbl2 : i1;
#endif
    //auto t11 = (a_dbl2 < d1) ? a_dbl2 : d1;

    //auto t12 = true ? a_emotion1 : HAPPY;
    a_emotion2 = SAD;
}


