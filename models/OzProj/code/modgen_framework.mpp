//LABEL(modgen_framework, EN) Simulation framework code for Modgen

/* NOTE(modgen_framework, EN)
    The OpenM++ compiler ignores source code files starting with "modgen_".
    This allows the selective incorporation of code just for the Modgen compiler.

	This module contains declarations and/or definitions of functions which differ
    in OpenM++ and Modgen.  This allows the use of a single model code base
    which can be used by either the Modgen compiler or the OpenM++ compiler.
*/

actor Person
{
    void initialize_attributes(); //EN Initialize all entity attributes (ompp)
    void enter_simulation(); //EN Have the entity enter the simulation (ompp)
    void exit_simulation(); //EN Have the entity exit the simulation (ompp)
};

void Person::initialize_attributes() { }
void Person::enter_simulation() { }
void Person::exit_simulation() { }

actor Observation
{
    void initialize_attributes(); //EN Initialize all entity attributes (ompp)
    void enter_simulation(); //EN Have the entity enter the simulation (ompp)
    void exit_simulation(); //EN Have the entity exit the simulation (ompp)
};

void Observation::initialize_attributes() { }
void Observation::enter_simulation() { }
void Observation::exit_simulation() { }

/**
 * Simulate all events for all entities in the simulation.
 */
void SimulateEvents()
{
	while (!gpoEventQueue->Empty())
	{
    	if (gbCancelled || gbErrors) 
    	{
			// Simulation cancelled by user, or run-time errors occurred.
			// Terminate the case immediately.
    		gpoEventQueue->FinishAllActors();
    	}
		else 
		{
			// Age actor to the time of the next event.
			gpoEventQueue->WaitUntil(gpoEventQueue->NextEvent()); 

			// Implement the next event.
			gpoEventQueue->Implement();
		}
	}
}

/**
 * The Simulation function is called by Modgen to simulate a set of cases.
 */
void Simulation()
{
  extern void CaseSimulation(); // defined elsewhere

  // Open the microdata file
  PersonOpenFile();

  // counter for cases simulated
  long lCase = 0;

  // The Modgen run-time implements CASES (used below),
  // which supplies the number of cases to simulate in a particular thread.
  // 
  // The following loop for cases is stopped if
  //  - the simulation is cancelled by the user, with partial reports (gbInterrupted)
  //  - the simulation is cancelled by the user, with no partial reports (gbCancelled)
  //  - a run-time error occurs (gbErrors)
  //
  // The global variables gbInterrupted, gbCancelled and gbErrors
  // are maintained by the Modgen run-time.
  for ( lCase = 0; lCase < CASES() && !gbInterrupted && !gbCancelled && !gbErrors; lCase++ )
  {
    // Simulate a case.

    // Tell the Modgen run-time to prepare to simulate a new case.
    StartCase();

    // Read the record corresponding to the case_id of the case
    long lCaseID = GetCaseID();
    PersonGetRecord(lCaseID);

    // Call the CaseSimulation function defined earlier in this module.
    CaseSimulation();

    // Tell the Modgen run-time that the case has been completed.
    SignalCase();
  }

  // Close the microdata file
  PersonCloseFile();
}
