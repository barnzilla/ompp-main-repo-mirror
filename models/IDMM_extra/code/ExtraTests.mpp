options event_trace=on;


// Extra tests for ompp probing

classification EYE_COLOUR
{
    //EN None
    EC_NONE,

    //EN Blue
    EC_BLUE,

    //EN Brown
    EC_BROWN,

    //EN Red
    EC_RED
};

actor Host
{
    EYE_COLOUR eye_colour;

    void SetEyeColour();

    hook SetEyeColour, OneTime;

};

void Host::SetEyeColour()
{
    int ec = 0;
    Lookup_Discrete1(RandUniform(12), &ec);
    eye_colour = (EYE_COLOUR)ec;
}


parameters{
    cumrate Discrete1[EYE_COLOUR];
};

actor_set Host asAllHostsByPhase[disease_phase] //EN All Hosts by disease phase
filter report_time >= 5;

table Host MyTest
{
    report_time
    * {
        duration(disease_phase, DP_INFECTIOUS) / duration() //EN Proportion infectious decimals=6
    }
};


partition MY_PART
{
    0.5, 2.1
};

classification APPEARANCE //EN Appearance
{
    //EN Looks fine
    A_FINE,

    //EN Looks sick
    A_SICK
};

aggregation APPEARANCE, DISEASE_PHASE
{
	A_FINE, DP_SUSCEPTIBLE,
	A_FINE, DP_LATENT,
	A_FINE, DP_IMMUNE,
	A_SICK, DP_INFECTIOUS
};

actor Host
{
    real hui = (disease_phase == DP_INFECTIOUS) ? 0.8 : 1.0;
    real qaly = weighted_duration(hui);
    real discount_factor = pow(0.99, int(report_time));

    real v00 = weighted_duration(hui);
    real v01 = weighted_duration(disease_phase, DP_IMMUNE, hui);
    real v02 = active_spell_duration(disease_phase, DP_INFECTIOUS);
    real v03 = completed_spell_duration(disease_phase, DP_INFECTIOUS);
    real v04 = active_spell_weighted_duration(disease_phase, DP_INFECTIOUS, hui);
    real v05 = completed_spell_weighted_duration(disease_phase, DP_INFECTIOUS, hui);
    real v06 = active_spell_delta(disease_phase, DP_INFECTIOUS, age);
    real v07 = completed_spell_delta(disease_phase, DP_INFECTIOUS, age);
    logical v08 = undergone_entrance(disease_phase, DP_INFECTIOUS);
    logical v09 = undergone_exit(disease_phase, DP_INFECTIOUS);
    logical v10 = undergone_transition(disease_phase, DP_IMMUNE, DP_SUSCEPTIBLE);
    logical v11 = undergone_change(disease_phase);
    counter v12 = entrances(disease_phase, DP_INFECTIOUS);
    counter v13 = exits(disease_phase, DP_INFECTIOUS);
    counter v14 = transitions(disease_phase, DP_IMMUNE, DP_SUSCEPTIBLE);
    counter v15 = changes(disease_phase);
    double v16 = value_at_first_entrance(disease_phase, DP_INFECTIOUS, age);
    double v17 = value_at_latest_entrance(disease_phase, DP_INFECTIOUS, age);
    double v18 = value_at_first_exit(disease_phase, DP_INFECTIOUS, age);
    double v19 = value_at_latest_exit(disease_phase, DP_INFECTIOUS, age);
    double v20 = value_at_first_transition(disease_phase, DP_SUSCEPTIBLE, DP_LATENT, age);
    double v21 = value_at_latest_transition(disease_phase, DP_SUSCEPTIBLE, DP_LATENT, age);
    double v22 = value_at_first_change(disease_phase, age);
    double v23 = value_at_latest_change(disease_phase, age);
    double v24 = value_at_entrances(disease_phase, DP_INFECTIOUS, age);
    double v25 = value_at_exits(disease_phase, DP_INFECTIOUS, age);
    double v26 = value_at_transitions(disease_phase, DP_INFECTIOUS, DP_IMMUNE, age);
    double v27 = value_at_changes(disease_phase, age);
    counter v28 = split(age, MY_PART);
    APPEARANCE v29 = aggregate(disease_phase, APPEARANCE);
    logical v30 = trigger_entrances(disease_phase, DP_INFECTIOUS);
    logical v31 = trigger_exits(disease_phase, DP_INFECTIOUS);
    logical v32 = trigger_transitions(disease_phase, DP_INFECTIOUS, DP_IMMUNE);
    logical v33 = trigger_changes(disease_phase);
    counter v34 = duration_counter(disease_phase, DP_LATENT, 0.083333);
    counter v35 = duration_counter(disease_phase, DP_LATENT, 0.083333, 12);
    logical v36 = duration_trigger(disease_phase, DP_LATENT, 0.5);
    counter v37 = self_scheduling_int(age);
    counter v38 = self_scheduling_split(age, MY_PART);
    counter v39 = self_scheduling_int(time);
    counter v40 = self_scheduling_split(time, MY_PART);
    counter v41 = self_scheduling_int(active_spell_duration(disease_phase, DP_LATENT));
    counter v42 = self_scheduling_split(active_spell_duration(disease_phase, DP_LATENT), MY_PART);
    counter v43 = self_scheduling_int(duration(disease_phase, DP_LATENT));
    counter v44 = self_scheduling_split(duration(disease_phase, DP_LATENT), MY_PART);
    counter v45 = self_scheduling_int(duration());
    counter v46 = self_scheduling_split(duration(), MY_PART);
    double v47 = weighted_cumulation(v12, discount_factor);

    //EN 10+ years
    logical year_ge_10 = (report_time >= 10) ? TRUE : FALSE;

	logical one_time_done = { FALSE };
	event timeOneTime, OneTime;
    double thingee;
    real one = { 1.0 };
    double thingee2 = COERCE(REPORT_TIME, thingee);
    int big_time = 9999;
    REPORT_TIME thingee3 = COERCE(REPORT_TIME, big_time);
};

TIME Host::timeOneTime()
{
    //
    // BEGIN Test access to other entities in time function (ompp only)
    // 

    //for (auto prHost : asAllHostsByPhase[DP_SUSCEPTIBLE]) // one day this will work!

    //double dSum = 0;
    //int nHosts = asAllHosts->Count();
    //for (int nJ = 0; nJ < nHosts; nJ++)
    //{
    //    auto prHost = asAllHosts->Item(nJ);
    //    // arbitrary attribute read across link in a time function
    //    //dSum += prHost->age; // this will generate a run-time error because age is a prohibited time-like attribute
    //    dSum += prHost->event_count; // this is OK
    //    // the following is disallowed and will generate a run-time error in ompp
    //    //prHost->thingee = 3.0;
    //}

    //
    // END Test access to other entities in time function (ompp only)
    // 

	if (one_time_done) return TIME_INFINITE;
	else return 0.0;
}
void Host::OneTime()
{
    thingee = RandNormal(11);

    one_time_done = TRUE;
    hook_OneTime();
}

table Host CumrateTest1
{
    {
        duration()
    }
    *eye_colour
};

actor Host
{
    APPEARANCE appearance = aggregate(disease_phase, APPEARANCE);
};
table Host MyTest2
{
    {
        duration()
    }
    * eye_colour+
    * appearance
    * disease_phase+
};

table Host MyTest3
{
    {
        value_out(thingee),
        min_value_out(thingee),
        max_value_out(thingee)
    }
};

table Host ZZZ_01
{
    {
        v00, //EN v00
        v01, //EN v01
        v02, //EN v02
        v03, //EN v03
        v04, //EN v04
        v05, //EN v05
        v06, //EN v06
        v07, //EN v07
        v08, //EN v08
        v09, //EN v09
        v10, //EN v10
        v11, //EN v11
        v12, //EN v12
        v13, //EN v13
        v14, //EN v14
        v15, //EN v15
        v16, //EN v16
        v17, //EN v17
        v18, //EN v18
        v19, //EN v19
        v20, //EN v20
        v21, //EN v21
        v22, //EN v22
        v23, //EN v23
        v24, //EN v24
        v25, //EN v25
        v26, //EN v26
        v27, //EN v27
        v28, //EN v28
        v29, //EN v29
        v30, //EN v30
        v31, //EN v31
        v32, //EN v32
        v33, //EN v33
        v34, //EN v34
        v35, //EN v35
        v36, //EN v36
        v37, //EN v37
        v38, //EN v38
        v39, //EN v39
        v40, //EN v40
        v41, //EN v41
        v42, //EN v42
        v43, //EN v43
        v44, //EN v44
        v45, //EN v45
        v46, //EN v46
        v47 //EN v47 decimals=2
  }
    * year_ge_10
};


table Host ZZZ_30_trigger
[ trigger_entrances(disease_phase, DP_INFECTIOUS) ]
{
    {
        //EN average age at transition decimals=5
        value_out(age) / unit
    }
};

table Host ZZZ_30_trigger_b
{
    v30
    * {
        //EN average age at transition decimals=5
        value_out(age) / unit
    }
};

table Host ZZZ_30_value_at
{
    {
        //EN average age at transition decimals=5
        value_at_entrances(disease_phase, DP_INFECTIOUS, age) / entrances(disease_phase, DP_INFECTIOUS)
    }
};

table Host ZZZ_30_duration
{
    {
        //EN Duration true proportion decimals=4
        duration(v30, TRUE) / duration()
    }
};

table Host ZZZ_30_age_time
{
    {
        //EN Average age on becoming infectious (in) decimals=4
        value_at_transitions(v30, FALSE, TRUE, age) / entrances(disease_phase, DP_INFECTIOUS),

        //EN Average age on becoming infectious (out) decimals=4
        value_at_transitions(v30, TRUE, FALSE, age) / entrances(disease_phase, DP_INFECTIOUS),

        //EN Average time on becoming infectious (in) decimals=4
        value_at_transitions(v30, FALSE, TRUE, time) / entrances(disease_phase, DP_INFECTIOUS),

        //EN Average time on becoming infectious (out) decimals=4
        value_at_transitions(v30, TRUE, FALSE, time) / entrances(disease_phase, DP_INFECTIOUS)
    }
};


table Host ZZZ_31_trigger
[ trigger_exits(disease_phase, DP_INFECTIOUS) ]
{
    {
        //EN average age at transition decimals=5
        value_out(age) / unit
    }
};

table Host ZZZ_31_value_at
{
    {
        //EN average age at transition decimals=5
        value_at_exits(disease_phase, DP_INFECTIOUS, age) / exits(disease_phase, DP_INFECTIOUS)
    }
};

table Host ZZZ_32_trigger
[ trigger_transitions(disease_phase, DP_IMMUNE, DP_SUSCEPTIBLE) ]
{
    {
        //EN average age at transition decimals=5
        value_out(age) / unit
    }
};

table Host ZZZ_33_trigger
[ trigger_changes(disease_phase) ]
{
    {
        //EN average age at transition decimals=5
        value_out(age) / unit
    }
};

table Host ZZZ_33_value_at
{
    {
        //EN average age at transition decimals=5
        value_at_changes(disease_phase, age) / changes(disease_phase)
    }
};

range YEAR //EN Year
{
    0, 20
};

actor Host
{
    //EN Year
    int year = self_scheduling_int(time);

    //EN Year
    int year_bounded = COERCE(YEAR, year);

    //EN Year flash
    logical year_flash = trigger_changes(year);

    //EN Year spell
    logical year_spell = !year_flash;

    //EN Infections
    int infections = entrances(disease_phase, DP_LATENT);
    
};

table Host ProbeTrigger1
{
    {
        //EN Year spell coverage (should be 1.0) decimals=5
        duration(year_spell, TRUE) / duration()
    }
};

track Host
{
    v30
};