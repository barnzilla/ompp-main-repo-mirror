// Copyright (c) 2013-2021 OpenM++ Contributors
// This code is licensed under the MIT license (see LICENSE.txt for details)

//LABEL(modgen_time_based, EN) Modgen simulation framework for time-based cross-compatible models

/* NOTE(modgen_time_based, EN)
    This module implements Modgen versions of core global functions for time-based models.
    
    This module is ignored by the OpenM++ compiler.
    
    It should not be necessary to modify any code in this module.
*/

#include <set> // for set used to hold sorted, deduplicated dirty list of events

/**
 * Simulate all events for all entities in the simulation.
 *
 * Used in the main simulation module of the model.
 */
void SimulateEvents()
{
    // Buffer for messages
    const size_t nBufSize = 255;
    TCHAR szBuffer[nBufSize];

    // Simulation member ordinal for progress reporting
    int nSimulationMember = GetReplicate();

    _stprintf_s(szBuffer, nBufSize, _T("%s %d: %s"), (LPCTSTR)ModelString("S_MODEL_REPLICATE"), nSimulationMember, (LPCTSTR)ModelString("S_MODEL_SIMULATION"));
    ProgressMessage( szBuffer );

    double dCurrentTime = TIME_INFINITE;
    double dStartTime = TIME_INFINITE;

    int nLastProgressPercent = -1;
    int nThisProgressPercent = -1;

    while ( true ) // Used to be while(!gpoEventQueue->Empty()), changed to allow sorting dirty list
    {
#if !defined(MODGEN_OLD_DIRTY_PROCESSING)
        if (gpoEventQueue->nRecalcSize > 1) {
            // This code block orders and unduplicates the Modgen dirty list
            // to follow new specification and ensure compatibility with ompp
            
            // comparator for Events
            struct EventCmp {
                bool operator()(const Event *lhs, const Event *rhs) const {
                    // Would have been nice to use the Earlier function, but can't
                    // because it is not declared const and is inside a compiled library.
                    //return gpoEventQueue->Earlier(lhs, rhs);
                    
                    // Instead, do the comparison directly according to the event ordering rules.
                    // The following code was copied from the definition of < in ompp/include/omc/Event.h
                    // and modifed to retrieve corresponding information from the Modgen Event class.
                    // The specification for the dirty list is that it is sorted according to the same
                    // rules as for events, expect that event time is ignored.

                    // earlier event time wins
                    //if (lhs->dTime < rhs->dTime) return true;
                    //if (lhs->dTime > rhs->dTime) return false;

                    // higher event priority wins
                    int lhs_event_priority = lhs->cEventPriority;
                    int rhs_event_priority = rhs->cEventPriority;
                    if (lhs_event_priority > rhs_event_priority) return true;
                    if (lhs_event_priority < rhs_event_priority) return false;

                    // lower event_id wins (earlier in alphabetic order by event name)
                    int lhs_event_id = lhs->nEventNum;
                    int rhs_event_id = rhs->nEventNum;
                    if (lhs_event_id < rhs_event_id) return true;
                    if (lhs_event_id > rhs_event_id) return false;

                    // lower agent_id wins (created earlier)
                    int lhs_agent_id = lhs->poActor->lActorId;
                    int rhs_agent_id = rhs->poActor->lActorId;
                    if (lhs_agent_id < rhs_agent_id) return true;
                    else return false;
                }
            };

            // dirty_list is the temporary std::set to sort and unduplicate the dirty events.
            // Note that std::set is sorted by comparator and unduplicated.
            // WHen items are inserted to the set, order and unduplication is imposed.
            std::set<Event*, EventCmp> dirty_set;

            // Iterate the Modgen dirty list
            // and add each dirty event to the temporary dirty_set.
            // Because the Modgen dirty list uses intrusive pointers in actors
            // there is no need to delete entries, free objects, etc.
            auto evt = gpoEventQueue->poRecalc; // head of Modgen linear list of dirty events
            while (evt) {
                // insert this event into the dirty_set (in sorted order with no duplicates)
                dirty_set.insert(evt);
                evt = evt->poNextRecalc;
            }

            // Traverse the temporary dirty set, rebuild the Modgen dirty event list
            // dirty_set is traversed in event order
            // events are tacked onto tail of Modgen dirty list
            bool first = true;
            gpoEventQueue->nRecalcSize = 0;
            for (auto& evt : dirty_set) {
                if (first) {
                    gpoEventQueue->poRecalc = evt; // initialize head
                    first = false;
                }
                else {
                    gpoEventQueue->poRecalcTail->poNextRecalc = evt; // tack onto current tail
                }
                gpoEventQueue->poRecalcTail = evt; // evt is new tail
                evt->poNextRecalc = NULL; // evt is new tail
                gpoEventQueue->nRecalcSize++;
            }
            dirty_set.clear();
        } // End of code block to order and unduplicate the Modgen dirty list.
#endif //!defined(MODGEN_OLD_DIRTY_PROCESSING)

        // CleanUp() was called from inside Empty(),
        // which used to be the controlling expression in the while() main event loop above.
        // That call was hoisted from there and placed here
        // so that the dirty list could be sorted and unduplicated before CleanUp is called.
        gpoEventQueue->CleanUp();
        if (gpoEventQueue->poQueue == NULL) {
            // To reproduce original logic which used while(!gpoEventQueue->Empty())
            break;
        }

        // get the time of next event, verify against the simulation end
        dCurrentTime = gpoEventQueue->NextEvent();

        // Note the start time (time of first event) for progress indicator
        if ( dStartTime == TIME_INFINITE )
        {
            dStartTime = dCurrentTime;
        }

        if ( dCurrentTime > SIMULATION_END() || gbInterrupted || gbCancelled || gbErrors )
        {
            if (dCurrentTime > SIMULATION_END())
            {
                // age all actors to the simulation end time
                gpoEventQueue->WaitUntilAllActors( SIMULATION_END() );
            }

            _stprintf_s(szBuffer, nBufSize, _T("%s %d: %s"), (LPCTSTR)ModelString("S_MODEL_REPLICATE"), nSimulationMember, (LPCTSTR)ModelString("S_MODEL_FINISH"));
            ProgressMessage( szBuffer );

            gpoEventQueue->FinishAllActors();
        }
        else 
        {
            // age all actors to the time of next event
            gpoEventQueue->WaitUntil( dCurrentTime );

            // implement the next event
            gpoEventQueue->Implement();
        }

        // Update progress indicator only if the integer percentage complete changes
        // (updates to the progress bar at every event are expensive).
        nThisProgressPercent = (int)( 100 * ( dCurrentTime - dStartTime ) /
                                            ( SIMULATION_END() - dStartTime ) );

        if ( nThisProgressPercent > nLastProgressPercent )
        {
            TimeReport( dCurrentTime );    // update simulation progress
            nLastProgressPercent = nThisProgressPercent;
        }
    }
}

/**
 * Write a start message for the simulation member in the log.
 *
 * Used in the main simulation module of the model.
 */
void LogSimulationStart()
{
    // Buffer for messages
    const size_t nBufSize = 255;
    TCHAR szBuffer[nBufSize];

    // Simulation member ordinal for progress reporting
    int nSimulationMember = GetReplicate();

    _stprintf_s(szBuffer, nBufSize, _T("%s %d: %s"), (LPCTSTR)ModelString("S_MODEL_REPLICATE"), nSimulationMember, (LPCTSTR)ModelString("S_MODEL_START"));
    ProgressMessage( szBuffer );
}



