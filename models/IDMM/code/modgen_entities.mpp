//LABEL(modgen_entities, EN) Modgen entity functions for cross-compatible models

/* NOTE(modgen_entities, EN)
	This module contains declarations and definitions of Modgen versions
	of entity functions which are generated by OpenM++ (ompp) and used in model code.
	Ompp requires that these functions be called explicitly in model code,
	whereas Modgen calls equivalent internal functions invisibly by modifying model code.
	The do-nothing versions defined here allow code which uses them to compile and run
	in Modgen.

    This module is ignored by the OpenM++ compiler.
*/

////////////////////////////////////////////////////////////////////
// For each type of entity in the model,                          //
// declare and define empty versions of the functions             //
// initialize_attributes, enter_simulation, and exit_simulation.  //
////////////////////////////////////////////////////////////////////

actor Host
{
    void initialize_attributes(); //EN Initialize all entity attributes (ompp)
    void enter_simulation(); //EN Have the entity enter the simulation (ompp)
    void exit_simulation(); //EN Have the entity exit the simulation (ompp)
};
void Host::initialize_attributes() { }
void Host::enter_simulation() { }
void Host::exit_simulation() { }

actor Ticker
{
    void initialize_attributes(); //EN Initialize all entity attributes (ompp)
    void enter_simulation(); //EN Have the entity enter the simulation (ompp)
    void exit_simulation(); //EN Have the entity exit the simulation (ompp)
};
void Ticker::initialize_attributes() { }
void Ticker::enter_simulation() { }
void Ticker::exit_simulation() { }

/////////////////////////////////////////////////////
// For each entity function <name> used by a hook, //
// declare and define empty versions of the        //
// function hook_<name>.                           //
/////////////////////////////////////////////////////

actor Host
{
    void hook_OneTime(); //EN Call hooked functions (ompp)
};
void Host::hook_OneTime() { }
