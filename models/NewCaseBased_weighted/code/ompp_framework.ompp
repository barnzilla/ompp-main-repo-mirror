// Copyright (c) 2013-2020 OpenM++ Contributors (see AUTHORS.txt)
// This code is licensed under the MIT license (see LICENSE.txt for details)

//LABEL(ompp_framework, EN) OpenM++ simulation framework

/* NOTE(ompp_framework, EN)
    This module specifies the simulation framework
    and supplies function definitions required by the framework.
*/

#include "omc/omSimulation.h" // For IDE
#if 0 // Hide from IDE

// The following modules in OM_ROOT/use will be compiled
// after all model-specific source code modules, in this order.

use "common.ompp";                              // Required

// Select exactly one of the following lines and comment the others
use "random/random_lcg41.ompp";                 // Stream RNGs use 41 linear congruential generators (Modgen-compatible)

// Select exactly one of the following lines and comment the others
use "case_based/case_based_lcg41.ompp";         // Case seed RNGs use 41 linear congruential generators (Modgen-compatible)

use "case_based/case_based_core.ompp";          // Required for case-based models

// Select exactly one of the following lines and comment the others
use "case_based/case_based_cases_per_run_exogenous.ompp"; // Specify number of cases as cases per run in parameter SimulationCases
//use "case_based/case_based_cases_per_member_exogenous.ompp"; // Specify number of cases as cases per member in parameter CasesPerMember
 
// Select exactly one of the following lines and comment the others
use "case_based/case_based_scaling_none.ompp";  // No population scaling

use "common_modgen.ompp";                       // Modgen API implementation for x-compatible models (optional)
use "case_based/case_based_modgen.ompp";        // Modgen API implementation for x-compatible case-based models (optional)

options weighted_tabulation = on;

#endif // Hide from IDE

namespace fmk {

    /**
     * Maximum number of random streams in the model (increase if insufficient)
     */
    const int model_streams = 100;
}

// process development model run options from model ini-file
void ProcessDevelopmentOptions(const IRunOptions * const i_options)
{
/*
Example of model ini-file with development model run options:

[MyTest]
ShowReport = yes                ; true if: "yes", "1", "true" or empty value, false if missing
ReportStyle = readable          ; string option
MinimumTime = 1234.56           ; double value, use as default: -inf
LineCount = 4321                ; integer option
EntityId = 1234567890123456789  ; long long integer
SelectedNames = e1,e2,e3        ; comma separated list of event names

Example of the code to get model run options from ini-file:

    using namespace std;

    bool isShowReport = i_options->boolOption("MyTest.ShowReport");
    string rptStyle = i_options->strOption("MyTest.ReportStyle");
    double minTime = i_options->doubleOption("MyTest.MinimumTime", -numeric_limits<double>::infinity());
    int lineCount = i_options->intOption("MyTest.LineCount", 0);
    long long entityId = i_options->longOption("MyTest.EntityId", 0);

    // option is a list of comma separated names
    list<string> evtList = openm::splitCsv(i_options->strOption("MyTest.SelectedNames"));

    // if option is not specified at all
    if (!i_options->isOptionExist("MyTest.ShowReport")) {
        // do something
    }

    // get a copy of all model run options, including openM++ standard options
    vector<pair<string, string>> allOpts = i_options->allOptions();

    // each option is a pair of key and value
    for (const auto & opt : allOpts) {
        // string key = opt.first;
        // string value = opt.second;
    }
*/
}
