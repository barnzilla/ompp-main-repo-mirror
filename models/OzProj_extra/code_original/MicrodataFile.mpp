// A reference to the file
Thread CStdioFile *clPersonCStdioFile = {NULL};
// A reference to the current line read from the file
Thread int nPersonLineIndex = 0;
// A reference to the number of lines in the file
Thread int nPersonLineCount = 0;
// Used to store the current record
Thread double PersonMicroData[SIZE(PERSON_MICRODATA_COLUMNS)];

string S_WRONG_FILE; //EN Wrong file - see parameter PersonMicroDataFile
string S_WRONG_NUMBER_OF_COLUMNS; //EN Wrong number of columns - see parameter PersonMicroDataFile

parameters
{
   file PersonMicroDataFile; //EN File name of starting population
};

// Read the specified record
bool PersonGetRecord(long i_lLine)
{
	bool	bFound = false;
	CString	szLine = "";

	//
	int nColumn = SIZE(PERSON_MICRODATA_COLUMNS); // Size needed for the array
	for (int nIndex = 0; nIndex < nColumn; nIndex++)
	{ 
		PersonMicroData[nIndex] = 0; // Initialize all elements to zero
	}

	//
	while (!bFound && nPersonLineIndex < nPersonLineCount)
	{
		// If the number of cases is greater than the number of lines, start reading the file from the beginning
		if (clPersonCStdioFile->ReadString(szLine) == FALSE)
		{
			clPersonCStdioFile->Seek(0, CFile::begin);
			clPersonCStdioFile->ReadString(szLine);
		}

		// If i_lLine corresponds to the line read from the file
		if (nPersonLineIndex == i_lLine)
		{
			int nSeparatorPos = 0;
			int nColumn = 0;
			
			// Start parsing the line read from the file and populate the array PersonMicroData
			szLine.Replace(_T(","), _T(";"));	// Allow ';' and ',' as seperators
			szLine.Replace(_T(";"), _T("; "));
			CString strValue = szLine.Tokenize(_T(";"), nSeparatorPos); 
			while (!strValue.IsEmpty()) 
			{ 
				double dValue = atof(strValue);	// Convert strValue to a double
				PersonMicroData[nColumn] = dValue;
				nColumn++;
				strValue = szLine.Tokenize(_T(";"), nSeparatorPos);
			}
		
			nPersonLineIndex++;
			bFound = true;

			// Leave the while loop 
			break;
		}
		else if (nPersonLineIndex < i_lLine)
		{
			nPersonLineIndex++;
		}
	}

	return bFound;
};

// Open the starting population file  
void PersonOpenFile()
{
	bool bReturn = {false}; // Indicate problems opening file
	int nColumn = SIZE(PERSON_MICRODATA_COLUMNS);
	int nColumnTemp = 0;
	int nSeparatorPos = 0;
	CString szFileName = PersonMicroDataFile;
	CString	szLine;
	CString strValue;

	clPersonCStdioFile = new CStdioFile;
	nPersonLineIndex = 0;
	bReturn = clPersonCStdioFile->Open(szFileName, CFile::modeRead | CFile::shareDenyWrite | CFile::typeText);
	if(bReturn == false)	// Problem reading the file
	{
		gbErrors = true;
		ModelExit(ModelString("S_WRONG_FILE"));
	}
	else
	{
		clPersonCStdioFile->ReadString(szLine);
		clPersonCStdioFile->Seek(0, CFile::begin);
		// Start parsing the line read from the file and get the number of columns in the file
		szLine.Replace(_T(","), _T(";"));	// Allow ';' and ',' as seperators
		szLine.Replace(_T(";"), _T("; "));
		strValue = szLine.Tokenize(_T(";"), nSeparatorPos); 
		while (!strValue.IsEmpty()) 
		{ 
			nColumnTemp++;
			strValue = szLine.Tokenize(_T(";"), nSeparatorPos);
		}

		// Get the number of lines in the file
		while (clPersonCStdioFile->ReadString(szLine) != FALSE)
		{
			nPersonLineCount++;
		}
		clPersonCStdioFile->Seek(0, CFile::begin);
	}

	// Compare the number of columns in the file with the input value
	if(nColumn != nColumnTemp)
	{
		gbErrors = true;
		ModelExit(ModelString("S_WRONG_NUMBER_OF_COLUMNS"));
	}
}

// Close the starting population file
void PersonCloseFile()
{
   clPersonCStdioFile->Close();
}
