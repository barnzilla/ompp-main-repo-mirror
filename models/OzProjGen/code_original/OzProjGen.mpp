//LABEL(OzProjGen, EN) Core simulation functions

/* NOTE(OzProjGen, EN)
	This module contains core simulation functions and definitions.
*/

// The model version number
version 0, 18, 0, 0;

// The model type
model_type case_based;

// The data type used to represent time
time_type double;

// Supported languages
languages {
	EN // English
};

parameters
{
   //EN Output file for synthetic starting population
   file PersonMicroDataFile;
};

// The CaseSimulation function simulates a single case,
// and is called by the Simulation function declared later
// in this module.

void CaseSimulation( ofstream *ofs )
{
  // Initialize the first actor in the case.
  Person *poFirstActor = new Person();
  poFirstActor->Start(  );

  // Note that all initial characteristics are assigned in Start.
  // Dump to output file.
  for (int nJ=0; nJ<SIZE(PERSON_MICRODATA_COLUMNS); nJ++ ) {
    // Fields:
    switch ( nJ ) {
    case PMC_SEX:
      (*ofs) << (int) poFirstActor->sex;
      break;
    case PMC_AGE:
      (*ofs) << (int) poFirstActor->integer_age;
      break;
    case PMC_REGION:
      (*ofs) << (int) poFirstActor->region;
      break;
    case PMC_NATIVE_BORN:
      (*ofs) << (int) poFirstActor->native_born;
      break;
    case PMC_RECENT_ARRIVAL:
      (*ofs) << (int) poFirstActor->recent_arrival;
      break;
    case PMC_YEARS_SINCE_ARRIVAL:
      (*ofs) << (int) poFirstActor->years_since_arrival;
      break;
    case PMC_INDIGENOUS:
      (*ofs) << (int) poFirstActor->indigenous;
      break;
    default:
      ; // Error
    }

    // Separators:
    if ( nJ < SIZE(PERSON_MICRODATA_COLUMNS) - 1 ) (*ofs) << ',';
    else (*ofs) << std::endl;
  }

	// Continue processing events until there are no more.
	// Model code is responsible for ending the case by calling
	// Finish on all existant actors.

	// The Modgen run-time implements the global event queue gpoEventQueue.
	while ( !gpoEventQueue->Empty() )
	{
		// The global variables gbCancelled and gbErrors
		// are maintained by the Modgen run-time.
		if ( gbCancelled || gbErrors )
		{
			// The user cancelled the simulation, or run-time errors occurred.
			// Terminate the case immediately.
			gpoEventQueue->FinishAllActors();
		}
		else
		{
			// Age all actors to the time of the next event.
			gpoEventQueue->WaitUntil( gpoEventQueue->NextEvent() );
	
			// Implement the next event.
			gpoEventQueue->Implement();
		}
	}

	// Note that Modgen handles memory cleanup when Finish is called on an actor.
}


// The Simulation function is called by Modgen to simulate a set of cases.
void Simulation()
{
  // Construct a local output stream object
  ofstream output_stream( PersonMicroDataFile, ios_base::out | ios_base::trunc );

	// counter for cases simulated
	long lCase = 0;

	// The Modgen run-time implements CASES (used below),
	// which supplies the number of cases to simulate in a particular thread.
	// 
	// The following loop for cases is stopped if
	//  - the simulation is cancelled by the user, with partial reports (gbInterrupted)
	//  - the simulation is cancelled by the user, with no partial reports (gbCancelled)
	//  - a run-time error occurs (gbErrors)
	//
	// The global variables gbInterrupted, gbCancelled and gbErrors
	// are maintained by the Modgen run-time.
	for ( lCase = 0; lCase < CASES() && !gbInterrupted && !gbCancelled && !gbErrors; lCase++ )
	{
		// Simulate a case.

		// Tell the Modgen run-time to prepare to simulate a new case.
		StartCase();

		// Call the CaseSimulation function defined earlier in this module.
		CaseSimulation( &output_stream );

		// Tell the Modgen run-time that the case has been completed.
		SignalCase();
	}
}
