//LABEL(PersonCore, EN) Core functionality of the Person actor

/* NOTE(PersonCore, EN)
	This module contains the basic information which defines the Person case.
*/

parameters 
{
    //EN Annual hazard of death
    double MortalityHazard;
    /* NOTE(MortalityHazard, EN)
        A constant hazard of death results in an exponential
        survival function.
    */
};

actor Person            //EN Individual
{
    // The variables time and age are automatically defined by Modgen.
    // Model-specific labels and notes are supplied below.

    //LABEL(Person.time, EN) Time
    /*NOTE(Person.time, EN)
        Time is a continuous quantity in this model.
        A unit of time is a year.
    */

    //LABEL(Person.age, EN) Age
    /*NOTE(Person.age, EN)
        Age is a continuous quantity in this model.
        A unit of age is a year.
    */

    //EN Alive
    logical alive = {TRUE};
    /*NOTE(Person.alive, EN)
        Set to TRUE when the actor starts, and to FALSE just before the actor finishes.
        Since the numeric value of TRUE is 1 and FALSE is 0, this variable
        can also be used to count actors in tables.
    */

    //EN Clone identifier
    int clone_id;
    
    //EN Number of clones to simulate in this case
    int_ptr clone_count_ptr;

    /*NOTE(Person.clone_count_ptr, EN)
      This is a pointer to a local variable in the framework function CaseSimulation.
      An entity in the simulation can use this pointer to tell the framework
      to simulate one or more clones.
      The type int_ptr is equivalent to 'int *' and is declared in custom_early.h
    */
    
    event timeMortalityEvent, MortalityEvent;    //EN Mortality event

    //LABEL(Person.Start, EN) Starts the actor
    void Start(int cl_id, int_ptr cl_cnt_ptr);

    //LABEL(Person.Finish, EN) Finishes the actor
    void Finish();
};

/*NOTE(Person.MortalityEvent, EN)
    This event implements a constant hazard of death.
*/

// The time function of MortalityEvent
TIME Person::timeMortalityEvent()
{
    TIME tEventTime = TIME_INFINITE;

    // Draw a random waiting time to death from an exponential distribution
    // based on the constant hazard MortalityHazard.
    tEventTime = WAIT( - TIME( log( RandUniform(1) ) / MortalityHazard ) );

    return tEventTime;
}

// The implement function of MortalityEvent
void Person::MortalityEvent()
{
    alive = FALSE;

    // Remove the actor from the simulation.
    Finish();
}

/*NOTE(Person.Start, EN)
    The Start function initializes actor variables before simulation
    of the actor commences.
*/
void Person::Start(int cl_id, int_ptr cl_cnt_ptr)
{
    // Modgen initializes all actor variables
    // before the code in this function is executed.

    // Initialize all attributes (OpenM++).
    initialize_attributes();

    age = 0;
    time = 0;
    clone_id = cl_id;
    clone_count_ptr = cl_cnt_ptr;

    // Have the entity enter the simulation (OpenM++).
    enter_simulation();

    // After the code in this function is executed,
    // Modgen initializes events and tables for the actor.
    // Modgen also outputs starting values to the tracking file if requested.
}

/*NOTE(Person.Finish, EN)
    The Finish function terminates the simulation of an actor.
*/
void Person::Finish()
{
    // Determine if this entity will be cloned
    // by communicating with the framework function CaseSimulation
    if (clone_id == 0) {
        bool clone_it = false;

        // characteristics of first entity in case determine whether to clone
        // some hard-coded tests, choose which one by changing test_num
        int test_num = 2;

        if (test_num == 0) {
            // no cloning
            clone_it = false;
        }
        else if (test_num == 1) {
            // test #1: unconditional cloning
            // Expected results in DurationOfLife table:
            // person count doubles (5000 to 10000)
            // mean, min, max identical
            clone_it = true;
        }
        else if (test_num == 2) {
            // test #2: clone if entity lived to age 80 or more
            // Expected results in DurationOfLife table:
            // person count increases (5000 to 6647)
            // min, max identical
            // men increases (71.9845 to 91.90681)
            if (age >= 80) {
                clone_it = true;
            }
            else {
                clone_it = false;
            }
        }

        if (clone_it) {
            ++(*clone_count_ptr);
        }
    }

    // Have the entity exit the simulation (OpenM++).
    exit_simulation();

    // After the code in this function is executed,
    // Modgen removes the actor from tables and from the simulation.
    // Modgen also recuperates any memory used by the actor.
}

/*NOTE(DurationOfLife, EN)
    This table contains statistics related to the duration of life.
*/
table Person DurationOfLife //EN Duration of Life
{
    {
        value_in(alive),                //EN Population size
        min_value_out(duration()),      //EN Minimum duration of life decimals=4
        max_value_out(duration()),      //EN Maximum duration of life decimals=4
        duration() / value_in(alive)    //EN Life expectancy decimals=4

    }    //EN Demographic characteristics
};
