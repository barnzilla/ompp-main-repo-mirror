// Copyright (c) 2013-2018 OpenM++ Contributors (see AUTHORS.txt for details)
// This code is licensed under the MIT license (see LICENSE.txt for details)

//LABEL(PA, EN) Substantive module
/* NOTE(PA, EN)
	Substantive module for PA1
*/

#include "omc/omSimulation.h" // For IDE

#if 0 // Hide from IDE

partition FIND_DIFFICULTY //EN Thresholds of hard-to-find difficulty
{
    0.70,
    0.80,
    0.90,
    0.95
};

parameters
{
    //EN Mortality hazard
    double Lambda;

    //EN Relative risk of mortality with condition
    model_generated double RR_with;

    //EN Relative risk of mortality without condition
    model_generated double RR_without;

    //EN Relative risk of mortality with condition adn treated
    model_generated double RR_treated;

    //EN log(RR) estimation distribution (mu)
    double log_RR_mu;

    //EN log(RR) estimation distribution (sigma)
    double log_RR_sigma;

    //EN Proportion with condition at birth
    double Alpha;

    //EN Proportion of population reached in intervention [0,1]
    double InterventionProportion;

    //EN Effectiveness of treatment [0,1]
    double TreatedEffectiveness;

    //EN Cost of finding
    double FindCost[FIND_DIFFICULTY];

    //EN Cost of test
    double TestCost;

    //EN Cost of treatment
    double TreatCost;
};

actor Person //EN Individual
{
    //EN alive
    bool alive = { true };

    //EN condition
    bool condition = { false };

    //EN hard to find
    double hard_to_find;

    //EN found (intervention)
    bool found = { false };

    //EN treated (intervention)
    bool treated = { false };

    //EN Cost of finding person
    double find_cost = { 0 };

    //EN Cost of testing person for condition
    double test_cost = { 0 };

    //EN Cost of treating person with condition
    double treat_cost = { 0 };

    //EN Total cost
    double total_cost = find_cost + test_cost + treat_cost;

    void Start_characteristics(); //EN Set characteristics at birth
    hook Start_characteristics, Start,1;

    void do_nothing(); //EN Empty function
    hook do_nothing, Start_characteristics, 100; // Force generation of hook_Start_characteristics

    event timeMortalityEvent, MortalityEvent;    //EN Mortality event
};

table Person Results //EN Results
[trigger_entrances(alive, false)]
{
    {
        unit,                               //EN Persons
        value_out(age) / unit,              //EN Average Years Lived decimals=4
        gini(value_out(age)),               //EN Gini Coefficient of Years Lived decimals=6
        value_out(total_cost) / unit //EN Average Total Cost decimals=0
    } //EN Measure
};

#endif // Hide from IDE

void PreSimulation()
{
    // Draw value of RR with condition for current replicate from estimation distribution.
    double z = RandNormal(1);
    RR_with = exp(log_RR_mu + log_RR_sigma * z);

    // Compute RR without condition to maintain same average life expectancy (with no treatment)
    RR_without = RR_with * (1.0 - Alpha) / (RR_with - Alpha);

    // Compute RR with condition and treated.
    // Is between RR_without and RR_with, a function of effectiveness.
    RR_treated = RR_without * TreatedEffectiveness + RR_with * (1.0 - TreatedEffectiveness);
};

void Person::do_nothing()
{
}

void Person::Start_characteristics()
{
    // Draw condition at birth
    condition = (RandUniform(2) < Alpha);

    // Draw hard-to-find characteristic at birth
    hard_to_find = RandUniform(4);

    // Implement intervention (at birth)
    // Determine if found during intervention
    if (hard_to_find < InterventionProportion) {
        found = true;

        // prt is a local variable of type partition
        FIND_DIFFICULTY prt;
        // set the partition category based on the value of hard_to_find [0,1]
        prt.set_from_value(hard_to_find);
        find_cost = FindCost[prt];

        test_cost = TestCost;
        
        if (condition) {
            treated = true;
            treat_cost = TreatCost;
        }
    }


    // Allow other functions to hook to this function
    hook_Start_characteristics();
}


TIME Person::timeMortalityEvent()
{
    // Apply appropriate RR to baseline hazard
    // depending on presence of condition and treatment.
    double hazard = 0.0;
    if (condition) {
        if (treated) {
            hazard = RR_treated * Lambda;
        }
        else {
            hazard = RR_with * Lambda;
        }
    }
    else {
        hazard = RR_without * Lambda;
    }

    // Draw time to event, with constant hazard (exponential distribution).
    TIME event_time = WAIT(-TIME(log(RandUniform(4)) / hazard));
    return event_time;
}

void Person::MortalityEvent()
{
    alive = false;
    Finish();
}


