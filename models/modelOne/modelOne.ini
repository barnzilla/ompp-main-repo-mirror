[General]
;
; number of subsamples, default: 1
;
; Subsamples = 8

;
; number of modeling processes: default is 1 for desktop (non-MPI) version
;   example of model run on MPI cluster using 1024 modeling processes:
;     mpiexec -n 1024 modelOne -OpenM.TaskName taskOne
; if MPI is used then
;   number of modeling processes = MPI world size
;   number of subsamples per process = total number of subsamples / number of processes
;   if total number of subsamples % number of processes != 0 then remainder calculated at root process
;

;
; max number of modeling threads, default: 1
;
; if number of subsamples per process < number of modeling threads then subsamples run sequentially.
; if more threads specified then subsamples run in parallel.
;
; for example:
;   model.exe -General.Subsamples 8 
;   model.exe -General.Subsamples 8 -General.Threads 4 
;   mpiexec -n 2 model.exe -General.Subsamples 31 -General.Threads 7
;
; Threads = 4

;
; model parameters
; any scalar model parameter can be specified in [Parameter] section
; or as command line argument or in profile_option table 
;
[Parameter]

;
; random seed value
;
StartingSeed = 16807

;
; number of cases for case-based models
;
; Cases = 5000

;
; simulation end time for time-based models
;
; SimulationEnd = 100

;
; some other parameter:
;
; Population=69899568

;
; openM++ run options
;
[OpenM]

;
; database connection string
;    default database name: model_name.sqlite
;
; Database = "Database=modelOne.sqlite; Timeout=86400; OpenMode=ReadWrite;"
;
Database = "Database=m1.sqlite; Timeout=86400; OpenMode=ReadWrite;"

;
; set id is working set id to get model input parameters
; if working set id specified as run option 
;    then use workset (set id) and workset base run (base run id) as source
;    else use min(set id) as default set of model parameters
;
; SetId = 4

;
; set name is name of working set to get model input parameters
; if working set name specified then it used to get set id
; if set id specified then set name is ignored
;
; SetName = modelOne_other

;
; run id to restart model run (i.e. after power failure)
;
; RestartRunId = 

;
; task id is an id of modeling task
; if modeling task id specified then
; model will run all working sets included into that modeling task
;
; TaskId = 1

;
; task name is name of modeling task
; if task name specified then it used to get task id
; if task id specified then set name is ignored
;
; TaskName = taskOne

;
; task "wait": 
; allow to dynamically append new input data into modeling task
; modeling task not completed automatically
; it is waiting until some external script signal: 
;   UPDATE task_run_lst SET status = 'p' WHERE task_run_id = 1234;
;
; TaskWait = false

;
; task run id to restart modeling task (i.e. after power failure)
;
; TaskRunId = 

;
; profile name to select run options from profile_option database table
; default value = model name
;
; OptionsProfile = modelOne

; convert to string format for float, double, long double, default: %.15g
;
; DoubleFormat = %.15g

;
; path to parameters csv file(s) directory
; if specified then for each parameter where exist param/dir/parameterName.csv
; values from csv file are used to run the model
;
; ParamDir = 

;
; if true then parameters csv file(s) contain enum id's, default: enum code
;
; IdCsv = false

;
; if true then use sparse output to database
;
SparseOutput = true

; if use sparse and abs(value) <= nullValue then value not stored
;
; SparseNullValue       ; sparse null value, you want to keep default = FLT_MIN

; language to display output messages
; default: Windows Control Panel or Linux LANG 
;
; messageLang = en-CA

;
; log settings:
; log can be enabled/disabled for 3 independent streams:
;   console         - cout stream
;   "last run" file - log file with specified name, truncated on every model run
;   "stamped" file  - log file with unique name, created for every model run
;
; "stamped" name produced from "last run" name by adding time-stamp and pid-stamp, i.e.:
;   modelOne.log => modelOne_20120817_160459_0148.1234.log
;
LogToConsole     = true         ; log to console
LogToFile        = true         ; log to file
; LogToStampedFile = false      ; log to "stamped" file
; LogUseTimeStamp  = false      ; use time-stamp in log "stamped" file name
; LogUsePidStamp   = false      ; use pid-stamp in log "stamped" file name
; LogFilePath      = model.log  ; log file path, default = current/dir/modelExeName.log 
; LogNoMsgTime     = false      ; if true then do not prefix log messages with date-time
; LogSql           = false      ; debug only: log sql statements

;
; trace log settings:
; trace can be enabled/disabled for 3 independent streams:
;   console         - cout stream
;   "last run" file - trace file with specified name (default: working set name)
;   "stamped" file  - log file with unique name, created for every model run
;
; "stamped" name produced from "last run" name by adding time-stamp and pid-stamp, i.e.:
;   trace.txt => trace_20120817_160459_0148.1234.txt
;
; TraceToConsole     = true       ; log to console
; TraceToFile        = true       ; log to file
; TraceToStampedFile = true       ; log to "stamped" file
; TraceFilePath      = trace.txt  ; log file path, default: working_set_name.txt
; TraceUseTimeStamp  = true       ; use time-stamp in log "stamped" file name
; TraceUsePidStamp   = true       ; use pid-stamp in log "stamped" file name
; TraceNoMsgTime     = false      ; if true then do not prefix trace messages with date-time
