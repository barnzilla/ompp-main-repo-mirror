// ModelOne: generated by openM++ compiler
// Copyright (c) 2013-2014 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

#include "modelOne_om.h"
using namespace openm;

// model parameters
static const int ageSize = 4;
static const int sexSize = 2;
static const int salarySize = 3;

static int startSeed = 1;
static double ageSex[ageSize][sexSize];
static int salaryAge[salarySize][ageSize];

// model output tables: subsample accumulators
static thread_local double salarySexSum[salarySize][sexSize];
static thread_local double salarySexCount[salarySize][sexSize];

// Model event loop: user code
void RunModel(IModel * const i_model)
{
    theLog->logMsg("Running Simulation");

    // calculate output accumulators for each sub-sample
    for (int nSalary = 0; nSalary < salarySize; nSalary++) {
        for (int nSex = 0; nSex < sexSize; nSex++) {

            salarySexCount[nSalary][nSex] = (double)(nSalary + nSex + i_model->subSampleNumber() + 1);

            salarySexSum[nSalary][nSex] = 0.0;
            for (int nAge = 0; nAge < ageSize; nAge++) {
                salarySexSum[nSalary][nSex] += 
                    ((double)salaryAge[nSalary][nAge]) * ageSex[nAge][nSex] * (double)(i_model->subSampleNumber() + 1);
            }
        }
    }

    // trace output: disabled by default, use command-line or model.ini to enable it
    theTrace->logMsg("Event loop completed");
}

// Initialize model run: read parameters
void RunInit(IRunInit * const i_runInit)
{
    // load model parameters
    theLog->logMsg("Reading Parameters");
    i_runInit->readParameter("StartingSeed", typeid(int), 1, &startSeed);
    i_runInit->readParameter("ageSex", typeid(double), ageSize * sexSize, ageSex);
    i_runInit->readParameter("salaryAge", typeid(int), salarySize * ageSize, salaryAge);
}

// Model startup method: initialize subsample
void ModelStartup(IModel * const i_model)
{
    theTrace->logMsg("Start model subsample");
}

// Model shutdown method: write output tables
void ModelShutdown(IModel * const i_model)
{
    // write output result tables: salarySex sub-sample
    theLog->logMsg("Writing Output Tables");

    const double * salarySexAccArr[2];
    salarySexAccArr[0] = (double *)salarySexSum;
    salarySexAccArr[1] = (double *)salarySexCount;
    i_model->writeOutputTable("salarySex", 2, salarySize * sexSize, salarySexAccArr);
}
