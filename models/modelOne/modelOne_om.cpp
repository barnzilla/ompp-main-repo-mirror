// ModelOne: generated by openM++ compiler
// Copyright (c) 2013-2015 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

#include "modelOne_om.h"
using namespace openm;

// model name
const char * OM_MODEL_NAME = "modelOne";

// model metadata digest: unique model key
// model metadata digest expected to be 32 digits hex
// modelOne is using special test value instead of actual digest
const char * OM_MODEL_DIGEST = "_201208171604590148_";

namespace openm
{
    // model API entries holder
    struct ModelEntryHolder
    {
        ModelEntryHolder(
            OM_RUN_INIT_HANDLER i_RunInitHandler,
            OM_STARTUP_HANDLER i_ModelStartupHandler,
            OM_EVENT_LOOP_HANDLER i_RunModelHandler,
            OM_SHUTDOWN_HANDLER i_ModelShutdownHandler
            )
        {
            RunInitHandler = i_RunInitHandler;              // link run init function
            ModelStartupHandler = i_ModelStartupHandler;    // link model startup function
            RunModelHandler = i_RunModelHandler;            // link user portion of model event loop
            ModelShutdownHandler = i_ModelShutdownHandler;  // link model shutdown function
        }
    };
}

namespace openm
{
    // set entry points to the code generated by openM++ compiler
    static ModelEntryHolder theModelEntry(RunInit, ModelStartup, RunModel, ModelShutdown);

    // size of parameters list: number of model input parameters
    const size_t PARAMETER_NAME_ARR_LEN = 3;

    // list of model input parameters name, type and size
    const ParameterNameSizeItem parameterNameSizeArr[PARAMETER_NAME_ARR_LEN] = {
        {"StartingSeed", typeid(int), 1},
        {"ageSex", typeid(double), ageSize * sexSize},
        {"salaryAge", typeid(int), salarySize * ageSize}
    };
}
