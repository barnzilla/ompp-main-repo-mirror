//LABEL(modgen_framework, EN) Simulation framework code for Modgen

/* NOTE(modgen_framework, EN)
    The OpenM++ compiler ignores source code files starting with "modgen_".
    This allows the selective incorporation of code just for the Modgen compiler.

	This module contains declarations and/or definitions of functions which differ
    in OpenM++ and Modgen.  This allows the use of a single model code base
    which can be used by either the Modgen compiler or the OpenM++ compiler.
*/


actor Person
{
    void initialize_attributes(); //EN Initialize all entity attributes (ompp)
    void enter_simulation(); //EN Have the entity enter the simulation (ompp)
    void exit_simulation(); //EN Have the entity exit the simulation (ompp)

    void hook_Start();
    void hook_StartClockHere();
    void hook_BirthdayEvent();
    void hook_Finish();
};

void Person::initialize_attributes() { }
void Person::enter_simulation() { }
void Person::exit_simulation() { }

void Person::hook_Start() { }
void Person::hook_StartClockHere() { }
void Person::hook_BirthdayEvent() { }
void Person::hook_Finish() { }

actor TestActor06
{
    void initialize_attributes(); //EN Initialize all entity attributes (ompp)
    void enter_simulation(); //EN Have the entity enter the simulation (ompp)
    void exit_simulation(); //EN Have the entity exit the simulation (ompp)

    void hook_Start();
    void hook_Finish();
    void hook_StartClockHere2();
};

void TestActor06::initialize_attributes() { }
void TestActor06::enter_simulation() { }
void TestActor06::exit_simulation() { }

void TestActor06::hook_Finish() { }
void TestActor06::hook_StartClockHere2() { }

bool do_exit_simulation_all = false;
/**
 * Tells the framework to exit all entities from the simulation after completion of the current event.
 */
void signal_exit_simulation_all()
{
    do_exit_simulation_all = true;
}


/**
 * Simulate all events for all entities in the simulation.
 */
void SimulateEvents()
{
	while (!gpoEventQueue->Empty())
	{
    	if (do_exit_simulation_all || gbCancelled || gbErrors) 
    	{
            do_exit_simulation_all = false;
			// Terminate the case.
    		gpoEventQueue->FinishAllActors();
    	}
		else 
		{
			// Age actor to the time of the next event.
			gpoEventQueue->WaitUntil(gpoEventQueue->NextEvent()); 

			// Implement the next event.
			gpoEventQueue->Implement();
		}
	}
}

/**
 * The Simulation function is called by Modgen to simulate a set of cases.
 */
void Simulation()
{
    extern void CaseSimulation(); // defined elsewhere

	long  lCase = 0; 	// counter for cases simulated

	// Loop through all cases.
	for ( lCase = 0; lCase < CASES() && !gbInterrupted 
		  && !gbCancelled && !gbErrors; lCase++ )
	{
		// Tell the Modgen run-time to prepare to simulate a new case.
		StartCase(); 

		// Call the CaseSimulation function defined earlier in this module.
		CaseSimulation(); 

		// Tell the Modgen run-time that the case has been completed.
		SignalCase();
	}
}
							

