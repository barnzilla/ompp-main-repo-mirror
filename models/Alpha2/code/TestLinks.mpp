actor Person
{
	logical spawning_done = { FALSE } ;
	event timeSpawnEvent, SpawnEvent;
};

link Thing.other_thing;
link Person.my_thing1 Thing.my_person1;
link Person.my_thing2 Thing.my_person2;
link Person.my_thing3 Thing.my_person3;
link Thing.spawner Person.things[];

TIME Person::timeSpawnEvent()
{
	return spawning_done ? TIME_INFINITE : WAIT(0.0);
}

void Person::SpawnEvent()
{
	// Create things and add to simulation
	Thing *thing1 = new Thing;
	thing1->Start();

	Thing *thing2 = new Thing;
	thing2->Start();

    // retrieval test
    //link<Thing> a = thing1->other_thing;

    // if the following worked, just-in-time would fail.
    // We need to intercept pointer references, that's the whol idea.
    // But tha means that mechanical changes in Modgne models may be required.
    // 
    //Thing *b = thing1->other_thing;

	// Link Person to thing1 and thing2
	my_thing1 = thing1;
	my_thing2 = thing2;

	// link thing1 and thing2
	thing1->other_thing = thing2;

	// populate multi-link of things
	things->Add(thing1);
	things->Add(thing2);

    // test #1: no dups
	things->Add(thing2);

    // test #2: make a hole
	things->Remove(thing1);
    // test #2: and another hole
	things->Remove(thing2);
    // test #2: fill holes, in reverse order
	things->Add(thing2);
	things->Add(thing1);

    // test #3, clear it
    things->RemoveAll();

    // test #4: put them both back into things, using reciprocal link
    thing1->spawner = this;
    thing2->spawner = this;

	spawning_done = TRUE;
}

actor Thing {
	logical alive = {TRUE};
	logical making_trouble = { TRUE };

	void Start();
	void Finish();

	event timeBeingGoodEvent, BeingGoodEvent;
	event timeMortalityEvent, MortalityEvent;
};


void Thing::Start()
{
    // Initialize all attributes (OpenM++).
    initialize_attributes();

    for (int j=0; j<10; j++) {
        Toy *my_toy = new Toy;
        my_toy->Start();
        toys->Add(my_toy);
    }

    // Have the entity enter the simulation (OpenM++).
    enter_simulation();
}

void Thing::Finish()
{
    // Have the entity exit the simulation (OpenM++).
    exit_simulation();
}

TIME Thing::timeBeingGoodEvent()
{
    // The following generates an error in Modgen (pointer operators are not allowed in event time function).
    //bool flg = other_thing->making_trouble;

    // But the following sidesteps Modgen's prohibition on pointer operators
    //auto what_is_this1 = *other_thing;
    //bool flg = (*other_thing).making_trouble;

    //auto what_is_this2 = *spawner;
    //auto var = (*spawner).eye_colour;

	return making_trouble ? WAIT(10 * RandUniform(5)) : TIME_INFINITE;
}

void Thing::BeingGoodEvent()
{
	making_trouble = FALSE;
}

TIME Thing::timeMortalityEvent()
{
	TIME tEventTime = TIME_INFINITE;
	tEventTime = WAIT( - TIME( log( RandUniform(4) ) / MortalityHazard ) );
	//tEventTime = WAIT( 50 );
	return tEventTime;
}

void Thing::MortalityEvent()
{
	alive = FALSE;
	Finish();
}


//
//table Person z01
//{
//	{
//		duration()
//	}
//    * first_30_agent_ids
//    * thing1_good
//};

//range RNG_M_N { 200, 300 };
//actor Person
//{
//    RNG_M_N some_agent_ids = actor_id;
//};
//actor Thing
//{
//    RNG_M_N some_agent_ids = actor_id;
//};
//table Person zzz
//[ actor_id >= 300 && actor_id <= 325 && !thing1_good ]
//{
//	{
//		duration()
//	}
//};

//table Person z01b
//[ !thing1_good ]
//{
//    some_agent_ids
//	* {
//		duration()
//	}
//};

//table Person z02
//[ actor_id == 322 ]
//{
//    thing1_good
//	* {
//		duration()
//	}
//};

table Thing LinkTest1
{
	{
		duration() //EN Thing-years decimals=5
	}
	* making_trouble
};

actor Person
{
	logical thing1_good = ! my_thing1->making_trouble; //EN Thing1 good
	logical thing2_good = ! my_thing2->making_trouble; //EN Thing2 good
};
table Person LinkTest2
{
	{
		duration()  //EN Person-years decimals=5
	}
	* thing1_good
	* thing2_good
};

actor Thing
{
    logical both_alive = alive && other_thing->alive; //EN Both things alive
    logical good = !making_trouble; //EN Being good
    logical other_good = !other_thing->making_trouble; //EN Other being good
};
table Thing LinkTest3
[ both_alive ]
{
	{
		duration()  //EN Thing-years decimals=5
	}
    * good
    * other_good
};

//table Thing LinkTest4
//[ both_alive ]
//{
//	{
//        value_out(other_thing->making_trouble),
//		duration()  //EN Thing-years decimals=5
//	}
//    * making_trouble
//    * other_thing->making_trouble
//};

table Person LinkTest5
[ count(things) == 0 ]
{
    {
        duration()
    }
};

actor Thing
{
    real real_actor_id = actor_id / 5000.0;
};

actor Person
{
    counter multilink1 = count(things);
    counter multilink2 = min_over(things, actor_id);
    counter multilink3 = max_over(things, actor_id);
    counter multilink4 = sum_over(things, actor_id);
    real    multilink5 = min_over(things, real_actor_id);
    real    multilink6 = max_over(things, real_actor_id);
    real    multilink7 = sum_over(things, real_actor_id);
    logical multilink8 = min_over(things, making_trouble);
};

table Person LinkTest6
[ alive == FALSE ]
{
    {
        value_out(multilink1),
        value_out(multilink2),
        value_out(multilink3),
        value_out(multilink4),
        value_out(multilink5),
        value_out(multilink6),
        value_out(multilink7),
        value_out(multilink8)
    }
};

actor Toy
{
    real lifetime;
    logical discarded = {FALSE};

	void Start();
	void Finish();

    event timeDiscardEvent, DiscardEvent;
};

void Toy::Start()
{
    // Initialize all attributes (OpenM++).
    initialize_attributes();

    lifetime = 50 * RandUniform(6);

    // Have the entity enter the simulation (OpenM++).
    enter_simulation();
}

void Toy::Finish()
{
    // Have the entity exit the simulation (OpenM++).
    exit_simulation();
}

TIME Toy::timeDiscardEvent()
{
	TIME tEventTime = WAIT( lifetime );
	return tEventTime;
}

void Toy::DiscardEvent()
{
    discarded = TRUE;
	Finish();
}

link Thing.toys[] Toy.things[];

actor Toy {
    counter manymany1 = sum_over(things, making_trouble);
    logical manymany2 = min_over(things, making_trouble);
    logical manymany3 = max_over(things, making_trouble);
};

table Toy LinkTest7
[ discarded ]
{
    {
        value_out(manymany1),
        value_out(manymany2),
        value_out(manymany3)
    }
};

actor Thing {
    real manymany4 = sum_over(toys, lifetime);
    real manymany5 = min_over(toys, lifetime);
    real manymany6 = max_over(toys, lifetime);
};
table Thing LinkTest8
[ alive == FALSE ]
{
    {
        value_out(manymany4),
        value_out(manymany5),
        value_out(manymany6)
    }
};

//table Person Table_LinkAsDim
//{
//    my_thing1->making_trouble
//    * {
//        duration()
//    }
//};

//table Person Table_LinkAsMeasure1
//{
//    alive
//    * {
//        my_thing1->making_trouble
//    }
//};

//table Person Table_LinkAsMeasure2
//{
//    alive
//    * {
//        value_out(my_thing1->making_trouble)
//    }
//};
