/**
* @file    leapless.ompp
* Implementation of leapless calendar functions
* 
* The artifical leapless calendar has exactly 365 days, with no leap years.
* Years have a fixed length of 1.0.
*/
// Copyright (c) 2013-2015 OpenM++
// This code is licensed under the MIT license (see LICENSE.txt for details)

namespace fmk {

    /**
     * The day ordinal (in year) of the first day of a month (in year).
     */
    const int month_to_first_day[12] = {
        0,      // January
        31,     // February
        59,     // March
        90,     // April
        120,    // May
        151,    // June
        181,    // July
        212,    // August
        243,    // September
        273,    // October
        304,    // November
        334     // December
    };

    /**
     * The month ordinal (in year) of a given day ordinal (in year).
     */
    const int day_to_month[365] = {
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, // January   31
         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,             // February  28
         2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, // March     31
         3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,     // April     30
         4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, // May       31
         5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,     // June      30
         6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, // July      31
         7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, // August    31
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,     // September 30
         9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, // October   31
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,     // November  30
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11  // December  31
    };

} // fmk

/**
 * The unique day number of a calendar date.
 *
 * @param year          The year, e.g. 2025.
 * @param month_in_year The month in the year, zero-based (0-11).
 * @param day_in_month  The day in the month, zero-based (0-30).
 *
 * @return The unique day number.
 */
int date_to_day(int year, int month_in_year, int day_in_month)
{
    assert(month_in_year >= 0 && month_in_year <= 11);
    return 365 * year + fmk::month_to_first_day[month_in_year] + day_in_month;
}

/**
 * The calendar date of a unique day number.
 *
 * @param day_number             The unique day number.
 * @param [in,out] year          The year, e.g. 2025.
 * @param [in,out] month_in_year The month in the year, zero-based (0-11).
 * @param [in,out] day_in_month  The day in the month, zero-based (0-30).
 * @param [in,out] day_in_week   The day in the week, zero-based (0-6)
 */
void day_to_date(int day_number, int& year, int& month_in_year, int& day_in_month, int& day_in_week)
{
    year = day_number / 365;
    int day_in_year = day_number % 365;

    month_in_year = fmk::day_to_month[day_in_year];
    day_in_month = day_in_year - fmk::month_to_first_day[month_in_year];
    day_in_week = day_number % 7;
}

/**
 * The leap year status of a year.
 *
 * @param year The year, e.g. 2025.
 *
 * @return Always returns false
 */
bool is_leap_year(int year)
{
    return false;
}

/**
 * The unique day number of a time.
 *
 * @param exact_time exact time, e.g. 2025.1234.
 *
 * @return The unique day number.
 */
int time_to_day(double exact_time)
{
    bool day_boundary = false;
    return time_to_day(exact_time, day_boundary);
}

/**
 * The unique day number of a time.
 *
 * @param time                  The exact time, e.g. 2025.1234.
 * @param [in,out] day_boundary True if time is on an exact day boundary.
 *
 * @return The unique day number.
 */
int time_to_day(double exact_time, bool& day_boundary) 
{
	int year = (int) exact_time;
	double year_part = exact_time - year;
	int day_in_year = (int) ( year_part / day_length() );
	int day_number = 365 * year + day_in_year;
	day_boundary = ( year_part == day_in_year * day_length() ) ? true : false;
	return day_number;
}

/**
 * The exact time of a unique day number.
 *
 * @param day_number The unique day number.
 *
 * @return The exact time, e.g. 2025.1234.
 */
double day_to_time(int day_number)
{
    int year = day_number / 365;
    int day_in_year = day_number % 365;
    double exact_time = year + day_in_year * day_length();
    return exact_time;
}

/**
 * The exact time duration of a day.
 * 
 * It is mathematically impossible to exactly represent 1/365 in a binary floating point number.
 *
 * @return A double.
 */
double day_length()
{
    // The returned value is 1/365, with mantissa coarsened
    // as in fixed_precision_float, using a value for the current epoch
    // (something bigger than 2048, e.g. 2050).
    // That drops 11 binary digits of precision, allowing
    // exact arithmetic using day lengths.
    return 0.0027397260273573920;
}

/**
 * The date of an exact time.
 *
 * @param exact_time             The exact time.
 * @param [in,out] year          The year, e.g. 2025.
 * @param [in,out] month_in_year The month in the year, zero-based (0-11).
 * @param [in,out] day_in_month  The day in the month, zero-based (0-30).
 * @param [in,out] day_in_week   The day in the week, zero-based (0-6)
 */
void time_to_date(double exact_time, int& year, int& month_in_year, int& day_in_month, int& day_in_week)
{
	int day_number = time_to_day(exact_time);
	day_to_date(day_number, year, month_in_year, day_in_month, day_in_week);
}

/**
 * The exact time of a calendar date.
 *
 * @param year          The year, e.g. 2025.
 * @param month_in_year The month in the year, zero-based (0-11).
 * @param day_in_month  The day in the month, zero-based (0-30).
 *
 * @return The exact time.
 */
double date_to_time(int year, int month_in_year, int day_in_month)
{
	int day = date_to_day(year, month_in_year, day_in_month);
	return day_to_time(day);
}
