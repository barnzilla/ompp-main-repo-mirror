/**
* @file    omSimulation_case_based.cpp
* Implementation of framework for case-based models
*
*/
// Copyright (c) 2013 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

parameters {
    //EN Simulation starting seed
    int SimulationSeed;

    //EN Simulation cases
    long long SimulationCases;
};

/**
 * The fmk namespace protects the global namespace for model use.
 */
namespace fmk {

    // Multiplier of generator used to generate the starting seeds for each case
    const long case_seed_generators[max_samples] = {
        470583131,
        1278375574,
        1182424016,
        465267208,
        236156608,
        507096703,
        1030737213,
        1192442634,
        286354484,
        1963413634,
        929285805,
        1074439303,
        1866718706,
        1746251423,
        444178200,
        1076542630,
        289753891,
        490363125,
        803959450,
        37939113,
        1153920361,
        1010788020,
        1148043095,
        1422167303,
        1596996927,
        396692538,
        2125924067,
        290525234,
        1412033687,
        70608958,
        366654164,
        29727326,
        40186327,
        1271122795,
        940165244,
        735279377,
        1988769561,
        988683283,
        1943943356,
        1294875557,
        914624015,
    };

    /**
     * Helper function to output a case checksum message to the trace log.
     * 
     * This function is used in framework code for the model, e.g. use/case_based_modegen.ompp. It
     * is implemented in the module use/common.ompp, which is included by all models.
     *
     * @param case_seed     The case seed.
     * @param case_sample   The case sample.
     */
    void case_checksum_msg(double case_seed, int case_sample)
    {
        theTrace->logFormatted("Case seed : %.0f\t-\tCase sample: %d\t-\tCheckSum : %.6f",
                           case_seed,
                           case_sample,
                           BaseEvent::get_event_checksum());
    }

    /**
     * The total number of cases to simulate, over all sample members.
     */
    long long all_cases = 0;

    /**
     * The case seed encoded, with high order bits containing the sample member id.
     */
    double case_seed_encoded = 0.0;

    /**
     * The case counter in thread.
     */
    long long case_counter_in_thread = 0;

} // fmk

/**
 * Gets the case seed of the current case (encoded with sample number).
 * 
 * See Modgen Developer's Guide.
 *
 * @return The case seed.
 */
double GetCaseSeed()
{
    return fmk::case_seed_encoded;
}

/**
 * Gets the sample number of the current case.
 *
 * See Modgen Developer's Guide.
 *
 * @return The case sample.
 */
int GetCaseSample()
{
    return fmk::sample_member;
}

/**
 * Gets the total number of cases, summed over all samples.
 *
 * See Modgen Developer's Guide.
 *
 * @return all cases.
 */
long long GetAllCases()
{
    return fmk::all_cases;
}

/**
 * Gets the number of "sub-samples" in the simulation.
 *
 * See Modgen Developer's Guide.
 *
 * @return The sub samples.
 */
int GetSubSamples()
{
    return fmk::sample_size;
}

/**
 * Gets case counter in thread.
 *
 * @return The case counter in thread.
 */
long long GetCaseCounterInThread()
{
    return fmk::case_counter_in_thread;
}


void SimulateEvents()
{
    // Simulate the case
    while (BaseEvent::do_next_event());
}

void RunModel(IModel * i_model)
{
    extern void CaseSimulation(); // defined elsewhere

    using namespace fmk;

    theLog->logMsg("Running Simulation");

    // The number of simulations in the sample of simulations (not used)
    sample_size = i_model->subSampleCount();

    // The member to simulate of the sample of simulations
    sample_member = i_model->subSampleNumber();

    int seed = SimulationSeed; // framework input parameter
    all_cases = SimulationCases; // framework input parameter
    long long cases = all_cases; // cases to simulate for this sample member

    // for sample numbers greater than maximum, re-use generators cyclically
    // and increment the starting case_seed for the simulation of the sample
    long case_seed = seed + (int)sample_member / max_samples;
    long case_seed_generator = case_seed_generators[sample_member % max_samples];

    // For sample_member numbers greater than limit, re-use generators cyclically.
    model_stream_generator = model_stream_generators[sample_member % max_samples];

    for (long long thisCase = 0; thisCase < cases; thisCase++) {

        {
            // initialize the stream generators
            long seed = case_seed;
            for (int model_stream = 0; model_stream < model_streams; model_stream++) {
                initialize_stream(model_stream, seed);
                long long product = model_stream_seed_generator;
                product *= seed;
                seed = product % mg_modulus;
            }
        }

        // Initialize global event counter for the case
        BaseEvent::global_event_counter = 0;

        // Initialize global time for the case  (can override in StartSimulation)
        BaseEvent::global_time = 0;

        // record the encoded case seed (case_seed + sample_member in high order bits)
        case_seed_encoded = case_seed + sample_member * ((double)mg_modulus + 1);

        // record the case counter within the thread of execution
        case_counter_in_thread = thisCase;

        // Reset the running event checksum
        BaseEvent::event_checksum_reset();

        // Simulate the case
        CaseSimulation();

        // Log the case checksum if activated
        if (BaseEvent::event_checksum_on) case_checksum_msg(case_seed, sample_member);

        // Debug check for no left-over agents for which Finish was not called (model error)
        assert(0 == BaseAgent::om_active_agents());

        {
            // generate the case seed for the next case
            long long product = case_seed_generator;
            product *= case_seed;
            case_seed = product % mg_modulus;
        }
    } // cases
}


