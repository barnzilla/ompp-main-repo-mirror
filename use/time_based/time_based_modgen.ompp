/**
* @file    time_based_modgen.ompp
* Implementation of framework for time-based models
* 
* The module modgen_common.ompp must be in a "use" statement
* before this module, to define smbols used here. 
*/
// Copyright (c) 2013-2014 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

parameters {
    //EN Simulation starting seed
    int SimulationSeed;

    //EN Simulation end time
    Time SimulationEnd;
};

namespace fmk {

    /**
     * The simulation end.
     */
    Time simulation_end;

    // The case seed encoded, with high order bits containing the sample member id
    double case_seed_encoded = 0.0;

} // namespace fmk

double GetCaseSeed()
{
    // Time-based models have no concept of case seed.
    // Return 0 for compatibility with Modgen trace output.
    return 0;
}

/**
 * Gets the replicate.
 *
 * See Modgen Developer's Guide.
 *  
 * @return The replicate.
 */
int GetReplicate()
{
    return fmk::sample_member;
}

/**
 * Gets the number of replicates.
 *
 * See Modgen Developer's Guide.
 *  
 * @return The number of replicates.
 */
int GetReplicates()
{
    return fmk::sample_size;
}

void LogSimulationStart()
{
    // TODO
    BaseEvent::global_time = 0;
}

void SimulateEvents()
{
    using namespace fmk;

    // Simulate the population
    while ( true ) {
        if (BaseEvent::time_next_event() > simulation_end) {
            BaseAgent::age_all_agents(simulation_end);
            BaseAgent::finalize_all_agents();
            break;
        }
        if (! BaseEvent::do_next_event() ) break;
    }
}

void RunModel(IModel * i_model)
{
    extern void CaseSimulation(); // defined elsewhere

    using namespace fmk;

    theLog->logMsg("Running Simulation");

    // The number of simulations in the sample of simulations (not used)
    sample_size = i_model->subSampleCount();

    // The member to simulate of the sample of simulations
    sample_member = i_model->subSampleNumber();

    int seed = SimulationSeed; // framework input parameter
    simulation_end = SimulationEnd; // framework input parameter

    // The master seed to simulate this member of the 'sample' of simulations
    long master_seed = seed + sample_member;

    // record the encoded 'case' seed (master_seed + sample_member in high order bits)
    case_seed_encoded = master_seed + sample_member * ((double)mg_modulus + 1);

    // For sample_member numbers greater than limit, re-use generators cyclically.
    model_stream_generator = model_stream_generators[sample_member % max_samples];

    {
        // initialize the stream generators
        long seed = master_seed;
        for (int model_stream = 0; model_stream < model_streams; model_stream++) {
            initialize_stream(model_stream, seed);
            long long product = model_stream_seed_generator;
            product *= seed;
            seed = product % mg_modulus;
        }
    }

    // Initialize global event counter
    BaseEvent::global_event_counter = 0;

    // Initialize global time (can override in StartSimulation)
    BaseEvent::global_time = -time_infinite;
     
    // Model-specific
    Simulation();
}

