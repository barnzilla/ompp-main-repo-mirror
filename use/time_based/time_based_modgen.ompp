/**
* @file    time_based_modgen.ompp
* Implementation of framework for time-based models
* 
* The module modgen_common.ompp must be in a "use" statement
* before this module, to define smbols used here. 
*/
// Copyright (c) 2013-2014 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

parameters {
    //EN Simulation starting seed
    int SimulationSeed;

    //EN Simulation end time
    Time SimulationEnd;
};

namespace fmk {

    /**
     * The simulation end.
     */
    Time simulation_end;

    // The case seed encoded, with high order bits containing the sample member id
    thread_local double case_seed_encoded = 0.0;

} // namespace fmk

double GetCaseSeed()
{
    // Time-based models have no concept of case seed.
    // Return 0 for compatibility with Modgen trace output.
    return 0;
}

/**
 * Gets the replicate.
 *
 * See Modgen Developer's Guide.
 *  
 * @return The replicate.
 */
int GetReplicate()
{
    return fmk::simulation_member;
}

/**
 * Gets the replicate.
 *
 * See Modgen Developer's Guide.
 *  
 * @return The replicate.
 */
int GetUserTableReplicate()
{
    return fmk::simulation_member;
}

/**
 * Gets the number of replicates.
 *
 * See Modgen Developer's Guide.
 *  
 * @return The number of replicates.
 */
int GetReplicates()
{
    return fmk::simulation_members;
}

void LogSimulationStart()
{
    // TODO
    BaseEvent::set_global_time(0);
}

double SIMULATION_END()
{
    return (double) SimulationEnd;
}


void SimulateEvents()
{
    using namespace fmk;

    // Simulate the population
    while ( true ) {
        if (fmk::do_exit_simulation_all) {
            // The previous event signalled to end the simulation
            BaseAgent::exit_simulation_all();
            fmk::do_exit_simulation_all = false;
            break;
        }
        if (BaseEvent::time_next_event() > simulation_end) {
            // The next event would exceed the maximum simulation time
            BaseAgent::age_all_agents(simulation_end);
            BaseAgent::exit_simulation_all();
            break;
        }
        if (!BaseEvent::do_next_event()) {
            // no more events
            break;
        }
    }
}

/**
 * Simulates the specified simulation member (replicate)
 *
 * @param mem_id    Identifier of the member to be simulated (replicate).
 * @param mem_count Total number of members (replicates).
 */
void RunSimulation(int mem_id, int mem_count)
{
    extern void CaseSimulation(); // defined elsewhere

    using namespace fmk;

    string msg = "Running Simulation - member=" + to_string(mem_id);
    theLog->logMsg(msg.c_str());

    // The number of simulations in the sample of simulations (not used)
    simulation_members = mem_count;

    // The member to simulate of the sample of simulations
    simulation_member = mem_id;

    int seed = SimulationSeed; // framework input parameter
    simulation_end = SimulationEnd; // framework input parameter

    // The master seed to simulate this member of the 'sample' of simulations
    long master_seed = seed + simulation_member;

    // record the encoded 'case' seed (master_seed + simulation_member in high order bits)
    case_seed_encoded = master_seed + simulation_member * ((double)mg_modulus + 1);

    // For simulation_member numbers greater than limit, re-use generators cyclically.
    model_stream_generator = model_stream_generators[simulation_member % max_samples];

    {
        // initialize the stream generators
        long seed = master_seed;
        for (int model_stream = 0; model_stream < model_streams; model_stream++) {
            initialize_stream(model_stream, seed);
            long long product = model_stream_seed_generator;
            product *= seed;
            seed = product % mg_modulus;
        }
    }
    // Initialize global time (can override in StartSimulation)
    BaseEvent::set_global_time(-time_infinite);
     
    // Model-specific
    Simulation();
}

