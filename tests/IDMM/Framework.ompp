// Copyright (c) 2013-2014 OpenM++
// This code is licensed under MIT license (see LICENSE.txt for details)

//LABEL(Framework, EN) Framework

/* NOTE(Framework, EN)
	This module specifies the simulation framework
    and supplies function definitions required by the framework.
*/

#include "omc/omSimulation.h" // For IDE
#if 0 // Hide from IDE
// The following modules will be compiled and assembled in this order
// after all model-specific modules.
use "common.ompp";
use "common_modgen.ompp";
use "random/random_modgen.ompp";
use "time_based/time_based_modgen.ompp";
#endif

namespace fmk {

    /**
     * Maximum number of random streams in the model (increase if insufficient)
     */
    const int model_streams = 15;
}

void StartSimulation()
{
    BaseEvent::global_time = 0;

    // Set the maximum time used in the simulation. This allows the simulation framework
    // to use fixed precision arithmetic for time-related quantities for consistent results.
    // A fixed value is used rather than Simulation End so that simulation results
    // are not affected by a change of time horizon.
    SetMaxTime(100.0);

	// Create the single ticker actor
	auto prTicker = new Ticker();
	prTicker->Start();

	// Create the Host actors
	for ( int nJ = 0; nJ < NumberOfHosts; nJ++ ) 
	{
		auto prHost = new Host();
		prHost->Start();
	}

	int nHosts = asAllHosts->Count();
	for ( int nJ = 0; nJ < nHosts; nJ++ ) 
	{
		auto prHost = asAllHosts->Item( nJ );
		for (int nK = 0; nK < ContactsOutPerHost; nK++ ) 
		{
			// Choose a host randomly from all hosts
			auto prContact = asAllHosts->GetRandom( RandUniform(3) );
			// Add it to the outgoing contacts link.
			// Note that if the contact happens to already be a contact, it will not be added.
			// That's because Modgen links can contain no duplicates.
			// Modgen links are like mathematical sets.
            if (prContact != prHost) {
                // do not link to self
			    prHost->mlContactsOut->Add( prContact );
            }
		}
	}
}

void EndSimulation()
{
}
