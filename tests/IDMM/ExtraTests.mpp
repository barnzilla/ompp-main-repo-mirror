

// Extra tests for ompp probing

actor_set Host asAllHostsByPhase[disease_phase] //EN All Hosts by disease phase
filter report_time >= 5;

table Host MyTest
{
    report_time
    * {
        duration(disease_phase, DP_INFECTIOUS) / duration() //EN Proportion infectious decimals=6
    }
};


partition MY_PART
{
    0.5, 2.1
};

classification APPEARANCE //EN Appearance
{
    //EN Looks fine
    A_FINE,

    //EN Looks sick
    A_SICK
};

aggregation APPEARANCE, DISEASE_PHASE
{
	A_FINE, DP_SUSCEPTIBLE,
	A_FINE, DP_LATENT,
	A_SICK, DP_INFECTIOUS,
	A_FINE, DP_IMMUNE
};

actor Host
{
    real hui = (disease_phase == DP_INFECTIOUS) ? 0.8 : 1.0;
    real qaly = weighted_duration(hui);

    real v00 = weighted_duration(hui);
    real v01 = weighted_duration(disease_phase, DP_IMMUNE, hui);
    real v02 = active_spell_duration(disease_phase, DP_INFECTIOUS);
    real v03 = completed_spell_duration(disease_phase, DP_INFECTIOUS);
    real v04 = active_spell_weighted_duration(disease_phase, DP_INFECTIOUS, hui);
    real v05 = completed_spell_weighted_duration(disease_phase, DP_INFECTIOUS, hui);
    real v06 = active_spell_delta(disease_phase, DP_INFECTIOUS, qaly);
    real v07 = completed_spell_delta(disease_phase, DP_INFECTIOUS, qaly);
    logical v08 = undergone_entrance(disease_phase, DP_INFECTIOUS);
    logical v09 = undergone_exit(disease_phase, DP_INFECTIOUS);
    logical v10 = undergone_transition(disease_phase, DP_IMMUNE, DP_SUSCEPTIBLE);
    logical v11 = undergone_change(disease_phase);
    counter v12 = entrances(disease_phase, DP_INFECTIOUS);
    counter v13 = exits(disease_phase, DP_INFECTIOUS);
    counter v14 = transitions(disease_phase, DP_IMMUNE, DP_SUSCEPTIBLE);
    counter v15 = changes(disease_phase);
    double v16 = value_at_first_entrance(disease_phase, DP_INFECTIOUS, age);
    double v17 = value_at_latest_entrance(disease_phase, DP_INFECTIOUS, age);
    double v18 = value_at_first_exit(disease_phase, DP_INFECTIOUS, age);
    double v19 = value_at_latest_exit(disease_phase, DP_INFECTIOUS, age);
    double v20 = value_at_first_transition(disease_phase, DP_SUSCEPTIBLE, DP_LATENT, age);
    double v21 = value_at_latest_transition(disease_phase, DP_SUSCEPTIBLE, DP_LATENT, age);
    double v22 = value_at_first_change(disease_phase, age);
    double v23 = value_at_latest_change(disease_phase, age);
    double v24 = value_at_entrances(disease_phase, DP_INFECTIOUS, age);
    double v25 = value_at_exits(disease_phase, DP_INFECTIOUS, age);
    double v26 = value_at_transitions(disease_phase, DP_INFECTIOUS, DP_IMMUNE, age);
    double v27 = value_at_changes(disease_phase, age);
    counter v28 = split(age, MY_PART);
    APPEARANCE v29 = aggregate(disease_phase, APPEARANCE);
    logical v30 = trigger_entrances(disease_phase, DP_INFECTIOUS);
    logical v31 = trigger_exits(disease_phase, DP_INFECTIOUS);
    logical v32 = trigger_transitions(disease_phase, DP_INFECTIOUS, DP_IMMUNE);
    logical v33 = trigger_changes(disease_phase);
    counter v34 = duration_counter(disease_phase, DP_LATENT, 0.083333);
    counter v35 = duration_counter(disease_phase, DP_LATENT, 0.083333, 12);
    logical v36 = duration_trigger(disease_phase, DP_LATENT, 0.5);
    counter v37 = self_scheduling_int(age);
    counter v38 = self_scheduling_split(age, MY_PART);

    //EN 10+ years
    logical year_ge_10 = (report_time >= 10) ? TRUE : FALSE;

	logical one_time_done = { FALSE };
	event OneTimetime, OneTime;
    double thingee;
};

TIME Host::OneTimetime()
{
	if (one_time_done) return TIME_INFINITE;
	else return 0.0;
}
void Host::OneTime()
{
    thingee = RandNormal(11);
    one_time_done = TRUE;
}

table Host ZZZ_01
{
    {
        v00, //EN v00
        v01, //EN v01
        v02, //EN v02
        v03, //EN v03
        v04, //EN v04
        v05, //EN v05
        v06, //EN v06
        v07, //EN v07
        v08, //EN v08
        v09, //EN v09
        v10, //EN v10
        v11, //EN v11
        v12, //EN v12
        v13, //EN v13
        v14, //EN v14
        v15, //EN v15
        v16, //EN v16
        v17, //EN v17
        v18, //EN v18
        v19, //EN v19
        v20, //EN v20
        v21, //EN v21
        v22, //EN v22
        v23, //EN v23
        v24, //EN v24
        v25, //EN v25
        v26, //EN v26
        v27, //EN v27
        v28, //EN v28
        v29, //EN v29
        v30, //EN v30
        v31, //EN v31
        v32, //EN v32
        v33, //EN v33
        v34, //EN v34
        v35, //EN v35
        v36, //EN v36
        v37, //EN v37
        v38 //EN v38
  }
    * year_ge_10
};


table Host MyTest3
{
    {
        value_out(thingee),
        min_value_out(thingee),
        max_value_out(thingee)
    }
};

