# Copyright (c) 2013 OpenM++
# This code is licensed under MIT license (see LICENSE.txt for details)

# Create openM++ database for a subsequent run of a model
# Run this script from the /openm/test_models folder
# Argument is the name of a model, located in a sister directory of test_models, e.g. Alpha1

# Input files:
#   Alpha1_inputs.pl - input parameter values for Alpha1
# 
# Creates a new openM++ database, which  has a fixed model_id of 11.


my $version = 1.0;

my $debug = 1; # diagnostics level


if ( $#ARGV+1 != 1 ) {
	print "inputs version $version\n";
	print "usage: inputs modelname\n";
	exit -1;
}

# name of model (from first argument)
my $model_name = $ARGV[0];

# sqlite3 executable
my $sqlite_exe = "../../bin/sqlite3.exe";

# sql source to create fresh database
my $create_db_sql = "../../sql/sqlite/create_db_sqlite.sql";

# model database
my $model_db = $model_name . ".sqlite";

# sql source to insert model metadata
my $create_model_sql =  "../build/${model_name}/src/" . $model_name . "_create_model.sql";

# sql source to insert model parameters (generated by this script)
my $insert_param_sql = "../build/${model_name}/src/" . $model_name . "_insert_param.sql";

# erase model database
unlink ${model_db};

if ( $debug ) {
	print "Create starting sqlite database - start", "\n";
}
open(SQLITE, "|${sqlite_exe} ${model_db}") || "Failed to open pipe: |${sqlite_exe} ${model_db}\n";
open(CREATE_DB, "<${create_db_sql}") || die "Failed to open ${create_db_sql}\n";
while (<CREATE_DB>) {
	print SQLITE;
}
close(CREATE_DB);
close(SQLITE); # close pipe to sqlite executable so that error message line indicators correspond to the sql source file
if ( $debug ) {
	print "Create starting sqlite database - end", "\n\n";
}

# insert model metadata, and grab stuff. model_id will be 11
my $model_time_stamp;
my @size_of_type;
my @parameters;
my @tables;
my @parameter_value_tables;
my @table_value_tables;
my @parm_dim_size;

if ( $debug ) {
	print "Insert model metadata in sqlite database - start", "\n";
}
open(SQLITE, "|${sqlite_exe} ${model_db}") || "Failed to open pipe: |${sqlite_exe} ${model_db}\n";
open(CREATE_MODEL, "<${create_model_sql}") || die "Fail to open ${create_model_sql}\n";
while (<CREATE_MODEL>) {
	if ( m/model timestamp:[^_]*_([0-9]+)_/ ) {
		# note model time stamp
		$model_time_stamp = $1;
	}
	if ( m/^INSERT INTO type_dic .*?SELECT.*?, (\d+), ['](\w+)['], (\d+), (\d+)/ ) {
        my $type_id = $1;
        my $type_name = $2;
        my $dic_id = $3;
        my $type_size = $4;
		@type_name[$type_id] = $type_name;
		@type_size[$type_id] = $type_size;
        if ( $debug ) {
	        print "Type: type_id=$1 type_name='$2' dic_id=$3 type_size=$4\n";
        }
	}
	if ( m/^INSERT INTO parameter_dic .*?SELECT.*? (\d+), ['](\w+)['], ['](\w+)['], (\d)+, (\d+)/ ) {
        my $parm_id = $1;
        my $parm_suffix = $2;
        my $parm_name = $3;
        my $parm_rank = $4;
        my $parm_datatype = $5;
        if ( $debug ) {
	        print "Parm: parm_id=$1 parm_suffix='$2' parm_name='$3' parm_rank=$4 parm_datatype=$5\n";
        }
        @parm_name[$parm_id] = $parm_name;
        @parm_suffix[$parm_id] = $parm_suffix;
        @parm_rank[$parm_id] = $parm_rank;
		push @parameters, $parm_suffix;
	}
	if ( m/^INSERT INTO parameter_dims .*?SELECT.*? (\d+), ['](\w+)['], (\d)+, (\d+)/ ) {
        my $parm_id = $1;
        my $dim_name = $2;
        my $dim_pos = $3;
        my $type_id = $4;
        if ( $debug ) {
	        print "Parm dim: parm_id=$parm_id dim_name='$dim_name' dim_pos=$dim_pos type_id=$type_id type_size=@type_size[$type_id]\n";
        }
        $parm_dim_size{$parm_id."_".$dim_pos} = @type_size[$type_id];
	}
	if ( m/^INSERT INTO table_dic .*?SELECT.*?, (\d+), ['](\w+)['], ['](\w+)[']/ ) {
        my $table_id = $1;
        my $table_suffix = $2;
        my $table_name = $3;
        if ( $debug ) {
	        print "Table: table_id=$1 table_suffix='$2' table_name='$3'\n";
        }
        @table_name[$table_id] = $table_name;
        @table_suffix[$table_id] = $table_suffix;
		push @tables, $table_suffix;
	}
	if ( m/^CREATE TABLE (\w+)/ ) {
		my $sql_table = $1;
		if ( $sql_table =~ /_w[0-9]+_/ ) {
			push @parameter_value_tables, $sql_table;
		}
		elsif ( $sql_table =~ /_s[0-9]+_/ ) {
			push @table_value_tables, $sql_table;
		}
	}

	print SQLITE;
}
close(CREATE_MODEL);
close(SQLITE); # close pipe to sqlite executable so that error message line indicators correspond to the sql source file

if ( $debug ) {
	print "Insert model metadata in sqlite database - end", "\n\n";
}

if ( $debug ) {
	print "\nPARAMETERS:\n";
	foreach my $parameter (@parameters) { print "$parameter\n"; }
	print "\nPARAMETER VALUE TABLES:\n";
	foreach my $parameter_value_table (@parameter_value_tables) { print "$parameter_value_table\n"; }
	print "\nTABLES:\n";
	foreach my $table (@tables) { print "$table\n"; }
	print "\nTABLE VALUE TABLES:\n";
	foreach my $table_value_table (@table_value_tables) { print "$table_value_table\n"; }
}

if ( $debug ) {
	print "\nModel time stamp = $model_time_stamp\n";
}

# create run time stamp based on current time
my $run_time_stamp;
my $run_time_stamp_readable;
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year += 1900;
$mon++;
$run_time_stamp_readable = sprintf("%04d-%02d-%02d %02d:%02d:%02d", $year, $mon, $mday, $hour, $min, $sec);
$run_time_stamp = sprintf("%04d%02d%02d%02d%02d%02d%04d", $year, $mon, $mday, $hour, $min, $sec, 0);;
if ( $debug ) {
	print "\nRun time stamp   = $run_time_stamp '${run_time_stamp_readable}'\n";
}

# parameter values from included perl script (in hash %parameter_values)
# are placed into the global %parameter_values
do "${model_name}_inputs.pl" || die "error with parameter file" ;

if ( $debug ) {
	print "\nSUPPLIED PARAMETER VALUES:\n";
}

while (my ($parameter, $value) = each %parameter_values) {
	print "${parameter}=${value}", "\n";
}

# Create insert_param.sql script
my $set_id = 11;
my $model_id = 11;
my $run_name = lc("${model_name}_${run_time_stamp}_run_${set_id}");

open(INSERT_PARAM_SQL, ">$insert_param_sql")  || die("CreateJobs: Failed to create $insert_param_sql");

print INSERT_PARAM_SQL "-- insert parameters for model: ${model_name}", "\n";
print INSERT_PARAM_SQL "-- model timestamp: _${run_time_stamp}_", "\n";
print INSERT_PARAM_SQL "-- script created at: ${run_time_stamp_readable}", "\n";
print INSERT_PARAM_SQL "--", "\n";

print INSERT_PARAM_SQL "\nINSERT INTO workset_lst", "\n";
print INSERT_PARAM_SQL "  (set_id, run_id, model_id, set_name, is_readonly, update_dt)", "\n";
print INSERT_PARAM_SQL "VALUES", "\n";
print INSERT_PARAM_SQL "  (${set_id}, NULL, ${model_id}, 'Default', 1, '${run_time_stamp_readable}');", "\n";
print INSERT_PARAM_SQL "\nINSERT INTO workset_txt (set_id, model_id, lang_id, descr, note)", "\n";
print INSERT_PARAM_SQL "VALUES", "\n";
print INSERT_PARAM_SQL "  (${set_id}, ${model_id}, 0, '${model_name} default parameters', '${model_name} default set of input parameters');", "\n";
							   
for (my $parm_id=0; $parm_id<=$#parm_name; $parm_id++) {
	my $parm_name = @parm_name[$parm_id];
	my $parm_suffix = @parm_suffix[$parm_id];
	my $parm_rank = @parm_rank[$parm_id];

    if ( $debug ) {
	    print "parm='$parm_name' rank=$parm_rank\n";
    }

	print INSERT_PARAM_SQL "\n";
	print INSERT_PARAM_SQL "\n";
	print INSERT_PARAM_SQL "--\n";
	print INSERT_PARAM_SQL "-- $parm_name\n";
	print INSERT_PARAM_SQL "--\n";

	print INSERT_PARAM_SQL "\n";
	print INSERT_PARAM_SQL "INSERT INTO workset_parameter (set_id, model_id, parameter_id)", "\n";
	print INSERT_PARAM_SQL "VALUES", "\n";
	print INSERT_PARAM_SQL "  (${set_id}, ${model_id}, ${parm_id});", "\n";

	print INSERT_PARAM_SQL "\n";
	print INSERT_PARAM_SQL "INSERT INTO workset_parameter_txt (set_id, model_id, parameter_id, lang_id, note)", "\n";
	print INSERT_PARAM_SQL "VALUES", "\n";
	print INSERT_PARAM_SQL "  (${set_id}, ${model_id}, ${parm_id}, 0, 'Value note for ${parm_name}');", "\n";


    $dim_list = "";
    $cells = 1;
    $default_value = 0.000031415900001;
    my @indices;
    for (my $dim_pos=0; $dim_pos<$parm_rank; $dim_pos++) {
        $indices[$dim_pos] = 0;
        $dim_list = "${dim_list}Dim${dim_pos}, ";
        $type_size = $parm_dim_size{$parm_id."_".$dim_pos};
        $cells = $cells * $type_size;
    }
    if ( $debug ) {
	    print "parm='$parm_name' cells=$cells\n";
    }

    my @parm_values; # list of values for this parameter
    if ($parm_rank == 0) {
        # parameter_values for this parameter (if present) contains a scalar
        # Turn it into a list with one element for the following code.
        if ( exists $parameter_values{$parm_name} ) {
            @parm_values = ($parameter_values{$parm_name});
        }
        else {
            # no values supplied for this parameter, so use the default value
            @parm_values = ($default_value);
        }
    }
    else {
        # parameter_values for this parameter (if present) contains a reference to a list
        if ( exists $parameter_values{$parm_name} ) {
            $array_ref = @parameter_values{$parm_name};
            @parm_values = @{$array_ref};
        }
        else {
            # no values supplied for this parameter, so use the default value
            @parm_values = ($default_value);
        }
    }
	my $parm_value_table = @parameter_value_tables[$parm_id];

    print INSERT_PARAM_SQL "\n";
    for ($cell=0; $cell<$cells; $cell++) {
        $index_list = join(", ", @indices);
        if ( $parm_rank > 0 ) {
            # add trailing comma for non-scalar parameters
            $index_list = $index_list.", ";
        }

        # if list does not contain enough values, use the default_value
        if ( $cell <= $#parm_values ) {
		    $parm_value = @parm_values[$cell];
        }
        else {
            $parm_value = $default_value;
        }
	    print INSERT_PARAM_SQL "INSERT INTO ${parm_value_table} (set_id, ${dim_list}value) VALUES (${set_id}, ${index_list}${parm_value});", "\n";

        if ( $cell < $cells-1) {
            # more cells to come, so increment the @indices tuple
            # First, increment last element of @indices
            @indices[$parm_rank-1]++;
            # Next, perform carry operations as required, from right to left
            if ($debug == 2) { print "before carry: indices=[" . join(",", @indices) . "]\n" };
            for (my $dim_pos=$parm_rank-1; $dim_pos>=0; $dim_pos--) {
                # size of this dimension
                $type_size = $parm_dim_size{$parm_id."_".$dim_pos};
                if (@indices[$dim_pos] == $type_size) {
                    # perform carry
                    @indices[$dim_pos] = 0;
                    @indices[$dim_pos-1]++;
                }
                else {
                    # no carry, so nothing to do with higher order indices, so break out of loop
                    break;
                }
            }
            if ($debug == 2) { print "after carry:  indices=[" . join(",", @indices) . "]\n" };
        }
    }
}

close(INSERT_PARAM_SQL);

if ( $debug ) {
	print "Insert parameter values to sqlite database - start", "\n";
}
open(INSERT_PARAM, "<${insert_param_sql}") || die "Failed to open ${insert_param_sql}\n";
open(SQLITE, "|${sqlite_exe} ${model_db}") || "Failed to open pipe: |${sqlite_exe} ${model_db}\n";
while (<INSERT_PARAM>) {
	print SQLITE;
}
close(INSERT_PARAM);
close(SQLITE); # close pipe to sqlite executable so that error message line indicators correspond to the sql source file
if ( $debug ) {
	print "Insert parameter values to sqlite database - end", "\n\n";
}

