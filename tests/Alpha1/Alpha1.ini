;
; model parameters
; any scalar model parameter can be specified in [Parameter] section
; or as command line argument or in profile_option table 
;
[Parameter]

;
; random seed value
;
; StartingSeed = 16807

;
; number of cases for case-based models
;
; Cases = 5000

;
; simulation end time for time-based models
;
; SimulationEnd = 100

;
; some other parameter:
;
; Population=69899568

;
; openM++ run options
;
[OpenM]

;
; database connection string
;
; Database = "Database=Alpha1.sqlite; Timeout=86400; OpenMode=ReadWrite;"

;
; run id can be explicitly specified, but you need to create it first
; do not use this parameter unless you exactly know what are you doing
;
; RunId = 

;
; set id is working set id to get model input parameters
; if working set id specified as run option 
;    then use workset (set id) and workset base run (base run id) as source
;    else use min(set id) as default set of model parameters
;
; SetId = 

;
; set name is name of working set to get model input parameters
; if working set name specified then it used to get set id
; if set id specified then set name is ignored
;
; SetName = Alpha1

;
; profile name to select run options from profile_option database table
; default value is model name
;
; OptionsProfile = Alpha1

;
; if true then use sparse output to database
;
; SparseOutput = false

; if use sparse and abs(value) <= nullValue then value not stored
;
; SparseNullValue       ; sparse null value, you want to keep default = DBL_EPSILON

;
; log settings:
; log can be enabled/disabled for 3 independent streams:
;   console         - cout stream
;   "last run" file - log file with specified name, truncated on every model run
;   "stamped" file  - log file with unique name, created for every model run
;
; "stamped" name produced from "last run" name by adding time-stamp and pid-stamp, i.e.:
;   modelOne.log => modelOne_20120817_160459_0148.1234.log
;
LogToConsole     = true       ; log to console
LogToFile        = true       ; log to file
; LogToStampedFile = true       ; log to "stamped" file
; LogUseTimeStamp  = true       ; use time-stamp in log "stamped" file name
; LogUsePidStamp   = true       ; use pid-stamp in log "stamped" file name
; LogFilePath      = alpha1.log ; log file path, default = current/dir/modelExeName.log 
; LogNoTimeConsole = true       ; if true then do not prefix console messages with date-time
; LogSql           = true       ; debug only: log sql statements

;
; trace log settings:
; trace can be enabled/disabled for 3 independent streams:
;   console         - cout stream
;   "last run" file - trace file with specified name (default: working set name)
;   "stamped" file  - log file with unique name, created for every model run
;
; "stamped" name produced from "last run" name by adding time-stamp and pid-stamp, i.e.:
;   trace.txt => trace_20120817_160459_0148.1234.txt
;
; TraceToConsole     = true       ; log to console
; TraceToFile        = true       ; log to file
; TraceToStampedFile = true       ; log to "stamped" file
; TraceUseTimeStamp  = true       ; use time-stamp in log "stamped" file name
; TraceUsePidStamp   = true       ; use pid-stamp in log "stamped" file name
; TraceFilePath      = trace.txt  ; log file path, default: working_set_name.txt
; TraceNoMsgTime     = false      ; if true then do not prefix trace messages with date-time

[General]
;
; do not use this parameter
; unless you exactly know what you are doing
;
; in case of MPI number of subsamples must be same as number of MPI processes
; use mpiexec to specify number of subsamples, i.e.:
;   mpiexec -n 8 model.exe
;
; if you not using MPI then you must create run id in database first 
; and specify number of subsamples for that run id
; in that case number of subsamples specified in ini-file or command line are rejected
;
; Subsamples = 8
